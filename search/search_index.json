{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyToC","text":""},{"location":"#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Bem-vindo ao reposit\u00f3rio da disciplina de Compiladores.</p> <p>Nesta mat\u00e9ria, exploraremos os fundamentos e os mecanismos envolvidos na constru\u00e7\u00e3o de compiladores \u2014 programas que traduzem c\u00f3digo-fonte de uma linguagem de programa\u00e7\u00e3o para outra, geralmente para linguagem de m\u00e1quina. O objetivo principal \u00e9 compreender como linguagens de programa\u00e7\u00e3o s\u00e3o interpretadas e executadas por computadores, al\u00e9m de desenvolver um compilador de <code>Python</code> para <code>C</code> como projeto pr\u00e1tico, esse compilador ser\u00e1 desenvolvido utilizando o Bison e Flex.</p>"},{"location":"#estrutura-do-repositorio","title":"Estrutura do Reposit\u00f3rio","text":""},{"location":"#descricao-dos-diretorios","title":"Descri\u00e7\u00e3o dos Diret\u00f3rios","text":"<ul> <li><code>Compilador/</code>: Cont\u00e9m os arquivos principais do compilador, incluindo os arquivos Flex e Bison, al\u00e9m do execut\u00e1vel gerado.</li> <li><code>Estudo/</code>: Diret\u00f3rio com materiais de estudo e resumos das semanas iniciais.</li> <li><code>docs/</code>: Diret\u00f3rio com documenta\u00e7\u00e3o detalhada, incluindo atas, planejamento e atividades semanais.</li> <li><code>semana 1/</code>, <code>semana2/</code>, <code>semana3/</code>: Diret\u00f3rios organizados por semana.</li> <li><code>mkdocs.yml</code>: Arquivo de configura\u00e7\u00e3o para gerar documenta\u00e7\u00e3o com o MkDocs.</li> </ul> <p>Essa estrutura foi projetada para organizar o projeto de forma clara, separando o c\u00f3digo-fonte, documenta\u00e7\u00e3o, materiais de estudo e vers\u00f5es semanais do compilador.</p>"},{"location":"#como-executar","title":"Como Executar","text":"<ol> <li> <p>Clonar o reposit\u00f3rio <code>bash    git clone https://github.com/Tiago1604/compiladores_14    cd compiladores_14</code></p> </li> <li> <p>Instalar depend\u00eancias</p> </li> <li>\u00c9 necess\u00e1rio ter Flex e Bison instalados no sistema.  </li> <li>Em distribui\u00e7\u00f5es Linux baseadas em Debian/Ubuntu:      <code>sudo apt-get update</code> <code>sudo apt-get install flex bison</code></li> <li> <p>Em outras plataformas, consulte a documenta\u00e7\u00e3o.</p> </li> <li> <p>Entre em Compilador</p> <ul> <li>Para compilar manualmente: <code>bison -d parser.y</code> <code>flex scanner.l</code> <code>gcc -o compilador parser.tab.c lex.yy.c -lfl</code></li> </ul> <p><code>./compilador</code> ou <code>./compilador &lt; entrada.txt</code></p> </li> </ol>"},{"location":"#atividades-semanais","title":"Atividades Semanais","text":"<p>A cada semana, novas atividades e exerc\u00edcios ser\u00e3o postados neste reposit\u00f3rio, acompanhados de explica\u00e7\u00f5es e instru\u00e7\u00f5es para sua realiza\u00e7\u00e3o.</p>"},{"location":"#membros-da-equipe","title":"Membros da Equipe","text":"Filipe Tiago Isabelle da Costa Jo\u00e3o Pedro Jo\u00e3o Pedro"},{"location":"Projeto_Final/Especificacao_do_projeto/","title":"Especifica\u00e7\u00e3o do Projeto: PYtoC","text":""},{"location":"Projeto_Final/Especificacao_do_projeto/#1-visao-geral","title":"1. Vis\u00e3o Geral","text":"<p>PYtoC \u00e9 um compilador que traduz da linguagem Python para c\u00f3digo C. O projeto foi desenvolvido como parte da disciplina de Compiladores, utilizando as ferramentas Flex e Bison.</p>"},{"location":"Projeto_Final/Especificacao_do_projeto/#2-funcionalidades-implementadas","title":"2. Funcionalidades Implementadas","text":""},{"location":"Projeto_Final/Especificacao_do_projeto/#21-estruturas-suportadas","title":"2.1 Estruturas Suportadas","text":"<ul> <li>Vari\u00e1veis e tipos b\u00e1sicos (int, float)</li> <li>Opera\u00e7\u00f5es aritm\u00e9ticas (+, -, *, /)</li> <li>Opera\u00e7\u00f5es de compara\u00e7\u00e3o (==, !=, &lt;, &gt;, &lt;=, &gt;=)</li> <li>Estruturas de controle:</li> <li>if/else</li> <li>for in range()</li> <li>while</li> <li>Fun\u00e7\u00f5es (defini\u00e7\u00e3o e chamada)</li> <li>Comando print para sa\u00edda</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#22-analise-lexica-scanner","title":"2.2 An\u00e1lise L\u00e9xica (Scanner)","text":"<ul> <li>Reconhecimento de tokens:</li> <li>Palavras-chave (if, else, for, while, in, range, print, def)</li> <li>Identificadores</li> <li>N\u00fameros (inteiros e flutuantes)</li> <li>Operadores</li> <li>Delimitadores</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#23-analise-sintatica-parser","title":"2.3 An\u00e1lise Sint\u00e1tica (Parser)","text":"<ul> <li>Gram\u00e1tica livre de contexto para o subconjunto Python</li> <li>Constru\u00e7\u00e3o da AST (\u00c1rvore Sint\u00e1tica Abstrata)</li> <li>Tratamento de preced\u00eancia de operadores</li> <li>Gerenciamento de escopo</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#24-geracao-de-codigo","title":"2.4 Gera\u00e7\u00e3o de C\u00f3digo","text":"<ul> <li>Tradu\u00e7\u00e3o direta para c\u00f3digo C</li> <li>Mapeamento de estruturas Python para C</li> <li>Gerenciamento de tipos</li> <li>Tratamento de fun\u00e7\u00f5es</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#3-problemas-e-solucoes","title":"3. Problemas e Solu\u00e7\u00f5es","text":""},{"location":"Projeto_Final/Especificacao_do_projeto/#31-integracao-flexbison","title":"3.1 Integra\u00e7\u00e3o Flex/Bison","text":"<ul> <li>Problema: Dificuldades em rela\u00e7\u00e3o a conflitos do parser, do tipo: <code>parser.y: warning: x shift/reduce conflicts [-Wconflicts-sr]    parser.y: warning: x reduce/reduce conflict [-Wconflicts-rr]</code></li> <li>Solu\u00e7\u00e3o: Estudo e aplica\u00e7\u00e3o do error verbose do Bison, al\u00e9m de ajustes na gram\u00e1tica para reduzir conflitos</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#32-compatibilidade-macos","title":"3.2 Compatibilidade macOS","text":"<ul> <li>Problema: Dificuldades espec\u00edficas no ambiente macOS</li> <li>Solu\u00e7\u00e3o: Ajustes na configura\u00e7\u00e3o e uso do arquivo de cabe\u00e7alho do Bison</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#33-compilacao-gcc","title":"3.3 Compila\u00e7\u00e3o GCC","text":"<ul> <li>Problema: Erros de compila\u00e7\u00e3o com fun\u00e7\u00f5es n\u00e3o definidas</li> <li>Solu\u00e7\u00e3o: Inclus\u00e3o da biblioteca -lfl e ajustes no comando de compila\u00e7\u00e3o</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#34-parser-e-ast","title":"3.4 Parser e AST","text":"<ul> <li>Problema: Complexidade na constru\u00e7\u00e3o e vincula\u00e7\u00e3o dos n\u00f3s da AST</li> <li>Solu\u00e7\u00e3o: Refinamento das regras gramaticais e mecanismos de constru\u00e7\u00e3o din\u00e2mica</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#35-gerenciamento-de-escopo","title":"3.5 Gerenciamento de Escopo","text":"<ul> <li>Problema: Conflitos entre vari\u00e1veis em diferentes contextos</li> <li>Solu\u00e7\u00e3o: Implementa\u00e7\u00e3o de sistema de escopo hier\u00e1rquico</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#36-interpretacao-de-toda-a-linguagem-sem-delimitacao-de-bloco","title":"3.6 Interpreta\u00e7\u00e3o de toda a linguagem sem delimita\u00e7\u00e3o de bloco","text":"<ul> <li>Problema: Dificuldade em interpretar corretamente o c\u00f3digo sem delimita\u00e7\u00e3o de bloco</li> <li>Solu\u00e7\u00e3o: ...</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#4-decisoes-tecnicas","title":"4. Decis\u00f5es T\u00e9cnicas","text":""},{"location":"Projeto_Final/Especificacao_do_projeto/#41-ferramentas","title":"4.1 Ferramentas","text":"<ul> <li>Flex para an\u00e1lise l\u00e9xica</li> <li>Bison para an\u00e1lise sint\u00e1tica</li> <li>GCC para compila\u00e7\u00e3o</li> <li>MkDocs para documenta\u00e7\u00e3o</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#42-estrutura-do-projeto","title":"4.2 Estrutura do Projeto","text":"<ul> <li>Organiza\u00e7\u00e3o modular em diret\u00f3rios espec\u00edficos</li> <li>Controle de vers\u00e3o com Git</li> <li>Branches organizados por funcionalidade</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#43-padroes-de-codigo","title":"4.3 Padr\u00f5es de C\u00f3digo","text":"<ul> <li>Nomenclatura consistente</li> <li>Coment\u00e1rios explicativos</li> <li>Tratamento de erros robusto</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#5-estado-atual-do-projeto","title":"5. Estado Atual do Projeto","text":""},{"location":"Projeto_Final/Especificacao_do_projeto/#51-funcionalidades-completas","title":"5.1 Funcionalidades Completas","text":"<ul> <li>An\u00e1lise l\u00e9xica</li> <li>An\u00e1lise sint\u00e1tica b\u00e1sica</li> <li>Gera\u00e7\u00e3o de c\u00f3digo para estruturas fundamentais</li> <li>Tabela de s\u00edmbolos</li> <li>Gerenciamento de escopo</li> <li>\u00c1rvore sint\u00e1tica abstrata (AST)</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#52-limitacoes","title":"5.2 Limita\u00e7\u00f5es","text":"<ul> <li>Sem suporte a arrays/listas</li> <li>Sem suporte a strings em todas opera\u00e7\u00f5es</li> <li>Fun\u00e7\u00f5es sem par\u00e2metros</li> <li>Sem suporte a m\u00f3dulos/imports</li> <li>Tratamento de erros limitado</li> <li>Sem suporte a classes e objetos</li> <li>Sem suporte a exce\u00e7\u00f5es</li> <li>Sem suporte a operadores l\u00f3gicos (and, or, not)</li> <li>Sem suporte a operadores bitwise</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#6-compilacao-e-uso","title":"6. Compila\u00e7\u00e3o e Uso","text":""},{"location":"Projeto_Final/Especificacao_do_projeto/#61-requisitos","title":"6.1 Requisitos","text":"<ul> <li>Flex e Bison instalados</li> <li>GCC</li> <li>Make (opcional)</li> </ul>"},{"location":"Projeto_Final/Especificacao_do_projeto/#62-comandos-de-compilacao","title":"6.2 Comandos de Compila\u00e7\u00e3o","text":"<pre><code>flex scanner.l\nbison -d parser.y\ngcc -o compilador parser.tab.c lex.yy.c ast.c tabela.c -lfl\n</code></pre>"},{"location":"Projeto_Final/Especificacao_do_projeto/#63-execucao","title":"6.3 Execu\u00e7\u00e3o","text":"<pre><code>./compilador &lt; entrada.py &gt; saida.c\ngcc saida.c -o programa\n./programa\n</code></pre>"},{"location":"Projeto_Final/Especificacao_do_projeto/#7-documentacao","title":"7. Documenta\u00e7\u00e3o","text":"<p>A documenta\u00e7\u00e3o completa do projeto est\u00e1 organizada nos seguintes diret\u00f3rios: - <code>/docs/problemas_e_solucoes/</code>: Registro de problemas encontrados e solu\u00e7\u00f5es - <code>/docs/decisoes/</code>: Documenta\u00e7\u00e3o das decis\u00f5es t\u00e9cnicas - <code>/docs/Projeto_Final/</code>: Especifica\u00e7\u00e3o final do projeto</p>"},{"location":"Projeto_Final/Guia_detalhado/","title":"Guia T\u00e9cnico do Compilador Python -&gt; C","text":""},{"location":"Projeto_Final/Guia_detalhado/#1-visao-geral","title":"1. Vis\u00e3o Geral","text":"<p>Este compilador converte um subconjunto da linguagem Python para c\u00f3digo C. Foi desenvolvido usando: - Flex (para an\u00e1lise l\u00e9xica) - Bison (para an\u00e1lise sint\u00e1tica) - Gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio atrav\u00e9s de uma AST (\u00c1rvore Sint\u00e1tica Abstrata).</p>"},{"location":"Projeto_Final/Guia_detalhado/#2-estrutura-do-projeto","title":"2. Estrutura do Projeto","text":"<p>Compilador/</p> <p>\u251c\u2500\u2500 scanner.l # Analisador l\u00e9xico (Flex)</p> <p>\u251c\u2500\u2500 parser.y # Analisador sint\u00e1tico (Bison)</p> <p>\u251c\u2500\u2500 ast.h/c # Defini\u00e7\u00e3o e manipula\u00e7\u00e3o da AST</p> <p>\u251c\u2500\u2500 tabela.h/c # Tabela de s\u00edmbolos</p> <p>\u251c\u2500\u2500 main.c # Programa principal</p> <p>\u251c\u2500\u2500 entrada/ # Diret\u00f3rio para arquivos Python de entrada</p> <p>\u251c\u2500\u2500 saida/ # Diret\u00f3rio para arquivos C gerados</p> <p>\u2514\u2500\u2500 tests/ # Testes do compilador</p>"},{"location":"Projeto_Final/Guia_detalhado/#3-funcionalidades-suportadas","title":"3. Funcionalidades Suportadas","text":""},{"location":"Projeto_Final/Guia_detalhado/#31-tipos-de-dados","title":"3.1. Tipos de Dados","text":"<ul> <li>Inteiros (<code>int</code>)</li> <li>Ponto flutuante (<code>float</code>)</li> <li>Identificadores (nomes de vari\u00e1veis)</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#32-estruturas-de-controle","title":"3.2. Estruturas de Controle","text":"<ul> <li><code>if/else</code></li> <li><code>while</code></li> <li><code>for</code> com <code>range</code></li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#33-funcoes","title":"3.3. Fun\u00e7\u00f5es","text":"<ul> <li>Defini\u00e7\u00e3o de fun\u00e7\u00f5es (<code>def</code>)</li> <li>Chamadas de fun\u00e7\u00e3o</li> <li><code>print()</code></li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#34-operadores","title":"3.4. Operadores","text":"<ul> <li>Aritm\u00e9ticos: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code></li> <li>Compara\u00e7\u00e3o: <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code></li> <li>Atribui\u00e7\u00e3o: <code>=</code></li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#4-limitacoes-e-restricoes","title":"4. Limita\u00e7\u00f5es e Restri\u00e7\u00f5es","text":""},{"location":"Projeto_Final/Guia_detalhado/#41-tipos","title":"4.1. Tipos","text":"<ul> <li>N\u00e3o suporta strings</li> <li>N\u00e3o suporta listas, tuplas ou dicion\u00e1rios</li> <li>N\u00e3o suporta tipos booleanos expl\u00edcitos</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#42-funcoes","title":"4.2. Fun\u00e7\u00f5es","text":"<ul> <li>N\u00e3o suporta fun\u00e7\u00f5es aninhadas</li> <li>N\u00e3o suporta argumentos com valor padr\u00e3o</li> <li>N\u00e3o suporta retorno de m\u00faltiplos valores</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#43-estruturas-de-controle","title":"4.3. Estruturas de Controle","text":"<ul> <li>N\u00e3o suporta <code>elif</code></li> <li>N\u00e3o suporta <code>break</code> e <code>continue</code></li> <li><code>for</code> s\u00f3 funciona com <code>range</code></li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#44-outras-limitacoes","title":"4.4. Outras Limita\u00e7\u00f5es","text":"<ul> <li>N\u00e3o suporta coment\u00e1rios (#)</li> <li>N\u00e3o suporta importa\u00e7\u00e3o de m\u00f3dulos</li> <li>N\u00e3o suporta classes e orienta\u00e7\u00e3o a objetos</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#5-casos-que-geram-erro","title":"5. Casos que Geram Erro","text":""},{"location":"Projeto_Final/Guia_detalhado/#51-erros-de-sintaxe","title":"5.1. Erros de Sintaxe","text":"<ul> <li>Indenta\u00e7\u00e3o incorreta</li> <li>Falta de dois pontos (<code>:</code>) ap\u00f3s <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>def</code></li> <li>Par\u00eanteses n\u00e3o fechados</li> <li>Operadores inv\u00e1lidos ou mal formados</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#52-erros-de-semantica","title":"5.2. Erros de Sem\u00e2ntica","text":"<ul> <li>Uso de vari\u00e1vel n\u00e3o declarada</li> <li>Opera\u00e7\u00f5es entre tipos incompat\u00edveis</li> <li>Chamada de fun\u00e7\u00e3o com n\u00famero incorreto de argumentos</li> <li>Redefini\u00e7\u00e3o de fun\u00e7\u00e3o</li> <li>Uso de fun\u00e7\u00e3o como vari\u00e1vel</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#53-exemplos-de-codigo-que-geram-erro","title":"5.3. Exemplos de C\u00f3digo que Geram Erro","text":"<pre><code># Erro: Coment\u00e1rios n\u00e3o s\u00e3o suportados\nx = 10  # isso gerar\u00e1 erro\n\n# Erro: Strings n\u00e3o s\u00e3o suportadas\nnome = \"Jo\u00e3o\"\n\n# Erro: Opera\u00e7\u00e3o com tipos incompat\u00edveis\nx = 10 + \"20\"\n\n# Erro: Fun\u00e7\u00e3o aninhada\ndef externa():\n    def interna():\n        pass\n\n# Erro: elif n\u00e3o \u00e9 suportado\nif x &gt; 0:\n    print(x)\nelif x &lt; 0:\n    print(-x)\n\n# Erro: break n\u00e3o \u00e9 suportado\nwhile x &gt; 0:\n    if x == 5:\n        break\n\n# Erro: for sem range\nfor x in [1,2,3]:\n    print(x)\n</code></pre>"},{"location":"Projeto_Final/Guia_detalhado/#6-uso-do-compilador","title":"6. Uso do Compilador","text":""},{"location":"Projeto_Final/Guia_detalhado/#61-comandos-make","title":"6.1. Comandos Make","text":"<ul> <li><code>make</code>: Compila o projeto</li> <li><code>make clean</code>: Limpa arquivos gerados</li> <li><code>make test</code>: Executa testes mostrando sa\u00edda no terminal</li> <li><code>make test-parser</code>: Testa valida\u00e7\u00e3o sint\u00e1tica</li> <li><code>make PyToC</code>: Converte entrada/entrada.py para saida/saida.c</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#62-processo-de-compilacao","title":"6.2. Processo de Compila\u00e7\u00e3o","text":"<ol> <li>An\u00e1lise L\u00e9xica (scanner.l)</li> <li>Identifica tokens</li> <li>Detecta caracteres inv\u00e1lidos</li> <li> <p>Conta linhas para mensagens de erro</p> </li> <li> <p>An\u00e1lise Sint\u00e1tica (parser.y)</p> </li> <li>Verifica estrutura do programa</li> <li>Constr\u00f3i AST</li> <li> <p>Gerencia erros sint\u00e1ticos</p> </li> <li> <p>An\u00e1lise Sem\u00e2ntica (ast.c, tabela.c)</p> </li> <li>Verifica tipos</li> <li>Gerencia escopo</li> <li> <p>Valida opera\u00e7\u00f5es</p> </li> <li> <p>Gera\u00e7\u00e3o de C\u00f3digo (ast.c)</p> </li> <li>Gera c\u00f3digo C equivalente</li> <li>Gerencia declara\u00e7\u00f5es de vari\u00e1veis</li> <li>Traduz estruturas de controle</li> </ol>"},{"location":"Projeto_Final/Guia_detalhado/#7-bibliotecas-e-ferramentas","title":"7. Bibliotecas e Ferramentas","text":""},{"location":"Projeto_Final/Guia_detalhado/#71-flex-scannerl","title":"7.1. Flex (scanner.l)","text":"<ul> <li>Usado para an\u00e1lise l\u00e9xica</li> <li>Gera arquivo lex.yy.c</li> <li>Define padr\u00f5es de tokens usando express\u00f5es regulares</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#72-bison-parsery","title":"7.2. Bison (parser.y)","text":"<ul> <li>Usado para an\u00e1lise sint\u00e1tica</li> <li>Gera parser.tab.c e parser.tab.h</li> <li>Define gram\u00e1tica livre de contexto</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#73-biblioteca-padrao-c","title":"7.3. Biblioteca Padr\u00e3o C","text":"<ul> <li>stdio.h: Entrada/sa\u00edda</li> <li>stdlib.h: Aloca\u00e7\u00e3o de mem\u00f3ria</li> <li>string.h: Manipula\u00e7\u00e3o de strings</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#8-exemplos-de-codigo-valido","title":"8. Exemplos de C\u00f3digo V\u00e1lido","text":""},{"location":"Projeto_Final/Guia_detalhado/#81-estruturas-de-controle","title":"8.1. Estruturas de Controle","text":"<pre><code># If-else simples\nx = 10\nif x &gt; 0:\n    print(x)\nelse:\n    print(-x)\n\n# While com contador\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i = i + 1\n\n# For com range\nfor i in range(5):\n    print(i)\n</code></pre>"},{"location":"Projeto_Final/Guia_detalhado/#82-funcoes","title":"8.2. Fun\u00e7\u00f5es","text":"<pre><code>def soma(a, b):\n    return a + b\n\nx = 10\ny = 20\nresultado = soma(x, y)\nprint(resultado)\n</code></pre>"},{"location":"Projeto_Final/Guia_detalhado/#83-operacoes-aritmeticas","title":"8.3. Opera\u00e7\u00f5es Aritm\u00e9ticas","text":"<pre><code>a = 10\nb = 20.5\nsoma = a + b\nmult = a * b\ndiv = b / a\nsub = b - a\n</code></pre>"},{"location":"Projeto_Final/Guia_detalhado/#9-dicas-de-uso","title":"9. Dicas de Uso","text":"<ol> <li>Sempre verifique se o arquivo entrada.py est\u00e1 na pasta entrada/</li> <li>Examine a sa\u00edda do compilador para mensagens de erro detalhadas</li> <li>Use <code>make test</code> para verificar se o compilador est\u00e1 funcionando corretamente</li> <li>Mantenha o c\u00f3digo Python dentro das limita\u00e7\u00f5es documentadas</li> <li>Verifique a AST gerada para entender como o c\u00f3digo est\u00e1 sendo interpretado</li> </ol>"},{"location":"Projeto_Final/Guia_detalhado/#10-escopo-do-compilador-python-c","title":"10. Escopo do Compilador Python -&gt; C","text":""},{"location":"Projeto_Final/Guia_detalhado/#1-tipos-de-variaveis-suportados","title":"1. Tipos de Vari\u00e1veis Suportados","text":"<ul> <li>Inteiros (int)</li> <li>Exemplo: <code>x = 10</code></li> <li>N\u00fameros inteiros positivos e negativos</li> <li>Ponto Flutuante (float)</li> <li>Exemplo: <code>y = 2.5</code></li> <li>N\u00fameros decimais</li> </ul> <p>N\u00e3o Suporta:</p> <ul> <li>Strings</li> <li>Booleanos (True/False), Listas, Dicion\u00e1rios, Tuplas<ul> <li>Seria em bibliotecas ent\u00e3o fugia do escopo basico da linguagem</li> </ul> </li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#2-operadores","title":"2. Operadores","text":""},{"location":"Projeto_Final/Guia_detalhado/#21-operadores-aritmeticos","title":"2.1 Operadores Aritm\u00e9ticos","text":"<ul> <li><code>+</code> (soma)</li> <li><code>-</code> (subtra\u00e7\u00e3o)</li> <li><code>*</code> (multiplica\u00e7\u00e3o)</li> <li><code>/</code> (divis\u00e3o)</li> </ul> <p>N\u00e3o Suporta:</p> <ul> <li><code>**</code> (pot\u00eancia)</li> <li><code>//</code> (divis\u00e3o inteira)</li> <li><code>%</code> (m\u00f3dulo)</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#22-operadores-de-comparacao","title":"2.2 Operadores de Compara\u00e7\u00e3o","text":"<ul> <li><code>&gt;</code> (maior que)</li> <li><code>&lt;</code> (menor que)</li> <li><code>&gt;=</code> (maior ou igual)</li> <li><code>&lt;=</code> (menor ou igual)</li> <li><code>==</code> (igual)</li> <li><code>!=</code> (diferente)</li> </ul> <p>N\u00e3o Suporta:</p> <ul> <li><code>is</code></li> <li><code>is not</code></li> <li><code>in</code></li> <li><code>not in</code></li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#23-operadores-de-atribuicao","title":"2.3 Operadores de Atribui\u00e7\u00e3o","text":"<ul> <li><code>=</code> (atribui\u00e7\u00e3o simples)</li> </ul> <p>N\u00e3o Suporta:</p> <ul> <li><code>++</code></li> <li><code>--</code></li> <li><code>+=</code></li> <li><code>-=</code></li> <li><code>*=</code></li> <li><code>/=</code></li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#3-estruturas-de-controle","title":"3. Estruturas de Controle","text":""},{"location":"Projeto_Final/Guia_detalhado/#31-if-else","title":"3.1 If-Else","text":"<pre><code>if condi\u00e7\u00e3o:\n    # c\u00f3digo\nelse:\n    # c\u00f3digo\n</code></pre> <p>N\u00e3o Suporta:</p> <ul> <li><code>elif</code></li> <li>Operadores l\u00f3gicos (<code>and</code>, <code>or</code>, <code>not</code>)</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#32-while","title":"3.2 While","text":"<pre><code>while condi\u00e7\u00e3o:\n    # c\u00f3digo\n</code></pre> <p>N\u00e3o Suporta:</p> <ul> <li><code>break</code></li> <li><code>continue</code></li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#33-for","title":"3.3 For","text":"<pre><code>for i in range(valor):\n    # c\u00f3digo\n</code></pre> <ul> <li>O <code>in</code> funciona apenas no metodo for.</li> </ul> <p>N\u00e3o Suporta:</p> <ul> <li><code>for</code> com listas</li> <li><code>for</code> com strings</li> <li><code>range</code> com compara\u00e7\u00e3o</li> <li><code>range</code> com in\u00edcio e fim</li> <li><code>break</code></li> <li><code>continue</code></li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#4-funcoes","title":"4. Fun\u00e7\u00f5es","text":""},{"location":"Projeto_Final/Guia_detalhado/#41-definicao-de-funcoes","title":"4.1 Defini\u00e7\u00e3o de Fun\u00e7\u00f5es","text":"<pre><code>def nome_funcao(param1, param2):\n    # c\u00f3digo\n    return valor\n</code></pre> <p>N\u00e3o Suporta:</p> <ul> <li>Par\u00e2metros com valor padr\u00e3o</li> <li>Par\u00e2metros nomeados</li> <li>Retorno m\u00faltiplo</li> <li>Fun\u00e7\u00f5es aninhadas</li> <li>Fun\u00e7\u00f5es lambda</li> <li>Decoradores</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#42-funcoes-built-in","title":"4.2 Fun\u00e7\u00f5es Built-in","text":"<ul> <li><code>print()</code></li> <li>Aceita apenas uma express\u00e3o ou string</li> <li>Exemplo: <code>print(x)</code>, <code>print(x + y)</code> ou <code>print(\"Hello, World!\")</code></li> </ul> <p>N\u00e3o Suporta:</p> <ul> <li><code>input()</code></li> <li><code>len()</code></li> <li><code>range()</code> (exceto no for)</li> <li>E nem <code>print(\"oi\")</code></li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#5-escopo-de-variaveis","title":"5. Escopo de Vari\u00e1veis","text":"<p>Paricalamente Suporta: - Vari\u00e1veis globais - Vari\u00e1veis locais em fun\u00e7\u00f5es Obs: N\u00e3o h\u00e1 mensagens de erro associadas.</p> <p>N\u00e3o Suporta:</p> <ul> <li>Vari\u00e1veis nonlocal</li> <li>Vari\u00e1veis em fun\u00e7\u00f5es aninhadas</li> <li>Closure</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#6-outros-recursos","title":"6. Outros Recursos","text":""},{"location":"Projeto_Final/Guia_detalhado/#61-indentacao","title":"6.1 Indenta\u00e7\u00e3o","text":"<ul> <li>Reconhece indenta\u00e7\u00e3o para blocos de c\u00f3digo</li> <li>Deve ser consistente dentro do mesmo bloco (Parcialmente Suporta)</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#62-expressoes","title":"6.2 Express\u00f5es","text":"<ul> <li>Express\u00f5es aritm\u00e9ticas simples</li> <li>Express\u00f5es de compara\u00e7\u00e3o simples</li> <li>Chamadas de fun\u00e7\u00e3o</li> </ul> <p>N\u00e3o Suporta:</p> <ul> <li>Express\u00f5es com operadores l\u00f3gicos</li> <li>Express\u00f5es condicionais (tern\u00e1rio)</li> <li>Express\u00f5es com m\u00faltiplos operadores l\u00f3gicos</li> </ul>"},{"location":"Projeto_Final/Guia_detalhado/#63-comentarios","title":"6.3 Coment\u00e1rios","text":"<p>N\u00e3o Suporta:</p> <ul> <li>Coment\u00e1rios com <code>#</code></li> <li>Docstrings</li> <li>Coment\u00e1rios multilinha</li> </ul>"},{"location":"atas/ata1/","title":"Ata da Reuni\u00e3o - Sprint 1","text":"<p>Data: 26/03/2025 Hora Prevista: 14:00 - 16:00 Hora Realizada: 14:00 - 16:00 Local: Presencial  </p>"},{"location":"atas/ata1/#participantes","title":"Participantes","text":"<ul> <li>Jo\u00e3o Pedro Costa</li> <li>Tiago Albuquerque</li> <li>Isabelle Costa</li> <li>Filipe Bressanelli </li> <li>Jo\u00e3o Pedro Ferreira</li> </ul>"},{"location":"atas/ata1/#pauta-da-reuniao","title":"Pauta da Reuni\u00e3o","text":"<ol> <li>Pr\u00e1tica de implementa\u00e7\u00e3o inicial.</li> <li>Defini\u00e7\u00e3o da metodologia de trabalho.</li> <li>Alinhamento de hor\u00e1rios para reuni\u00f5es semanais.</li> <li>Brainstorm sobre as tecnologias a serem utilizadas no projeto.</li> <li>Estabelecimento do fluxo de trabalho organizado por etapas semanais.</li> </ol>"},{"location":"atas/ata1/#decisoes-tomadas","title":"Decis\u00f5es Tomadas","text":"<ul> <li>Metodologia: Ser\u00e1 utilizada uma abordagem incremental, com entregas semanais baseadas em sprints.</li> <li>Ferramentas: Decidiu-se pelo uso de Flex e Bison para a constru\u00e7\u00e3o do compilador.</li> </ul>"},{"location":"atas/ata1/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ol> <li>Configurar o ambiente de desenvolvimento com Flex e Bison.</li> <li>Criar a estrutura inicial do reposit\u00f3rio.</li> <li>Implementar o analisador l\u00e9xico b\u00e1sico.</li> <li>Preparar exemplos simples de c\u00f3digo Python para teste.</li> </ol>"},{"location":"atas/ata2/","title":"Ata da Reuni\u00e3o - Sprint 2","text":"<p>Data: 09/04/2025 Hora Prevista: 14:00 - 16:00 Hora Realizada: 14:00 - 16:00 Local: Presencial  </p>"},{"location":"atas/ata2/#participantes","title":"Participantes","text":"<ul> <li>Jo\u00e3o Pedro Costa</li> <li>Tiago Albuquerque</li> <li>Isabelle Costa</li> <li>Filipe Bressanelli </li> <li>Jo\u00e3o Pedro Ferreira</li> </ul>"},{"location":"atas/ata2/#pauta-da-reuniao","title":"Pauta da Reuni\u00e3o","text":"<ol> <li>Revis\u00e3o do progresso da Sprint 1.</li> <li>Discuss\u00e3o sobre o analisador l\u00e9xico implementado.</li> <li>Planejamento da implementa\u00e7\u00e3o do analisador sint\u00e1tico.</li> <li>Organiza\u00e7\u00e3o do fluxo de commits no reposit\u00f3rio.</li> </ol>"},{"location":"atas/ata2/#decisoes-tomadas","title":"Decis\u00f5es Tomadas","text":"<ul> <li>Analisador L\u00e9xico: O analisador l\u00e9xico b\u00e1sico foi conclu\u00eddo e validado com exemplos simples.</li> <li>Analisador Sint\u00e1tico: Ser\u00e1 iniciado o desenvolvimento do analisador sint\u00e1tico utilizando Bison.</li> <li>Fluxo de Trabalho: Adotar a estrat\u00e9gia de branches no Git para organizar o desenvolvimento (ex.: <code>main</code>, <code>dev</code>, <code>feature/analise-sintatica</code>).</li> <li>Revis\u00e3o de C\u00f3digo: Implementar revis\u00f5es de c\u00f3digo regulares para garantir a qualidade do c\u00f3digo.</li> </ul>"},{"location":"atas/ata2/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ol> <li>Implementar o analisador sint\u00e1tico b\u00e1sico com suporte a express\u00f5es aritm\u00e9ticas.</li> <li>Testar a integra\u00e7\u00e3o entre o analisador l\u00e9xico e o sint\u00e1tico.</li> <li>Atualizar a documenta\u00e7\u00e3o no diret\u00f3rio <code>docs/</code>.</li> </ol>"},{"location":"atas/ata3/","title":"Ata da Reuni\u00e3o - Sprint 3","text":"<p>Data: 07/05/2025 Hora Prevista: 14:00 - 16:00 Hora Realizada: 14:00 - 16:00 Local: Presencial  </p>"},{"location":"atas/ata3/#participantes","title":"Participantes","text":"<ul> <li>Jo\u00e3o Pedro Costa  </li> <li>Tiago Albuquerque  </li> <li>Isabelle Costa  </li> <li>Filipe Bressanelli  </li> </ul>"},{"location":"atas/ata3/#pauta-da-reuniao","title":"Pauta da Reuni\u00e3o","text":"<ol> <li>Implementar o analisador sint\u00e1tico b\u00e1sico com suporte a express\u00f5es aritm\u00e9ticas.</li> <li>Testar a integra\u00e7\u00e3o entre o analisador l\u00e9xico e o sint\u00e1tico.</li> <li>Atualizar a documenta\u00e7\u00e3o no diret\u00f3rio <code>docs/</code>.</li> </ol>"},{"location":"atas/ata3/#decisoes-tomadas","title":"Decis\u00f5es Tomadas","text":"<ul> <li>Defini\u00e7\u00e3o de tarefas:<ul> <li>Realizar os testes de integra\u00e7\u00e3o entre o analisador l\u00e9xico e o sint\u00e1tico.</li> <li>Criar mensagens de erro para os casos de falha no analisador sint\u00e1tico.</li> <li>Criar uma aba de ajustes no README para facilitar a navega\u00e7\u00e3o.</li> </ul> </li> <li>Respons\u00e1veis pelos testes: Filipe e Isabelle.  </li> <li>Respons\u00e1veis pelas mensagens de erro: Jo\u00e3o Pedro e Tiago.  </li> <li>Ajustes: Criar uma aba de ajustes no README.  </li> </ul>"},{"location":"atas/ata3/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ol> <li>Estender as regras gramaticais no Bison.  </li> <li>Criar e popular a tabela de s\u00edmbolos.  </li> <li>Construir a AST.  </li> <li>Implementar verifica\u00e7\u00e3o de tipos e escopo simples.  </li> </ol>"},{"location":"atas/ata4/","title":"Ata da Reuni\u00e3o - Sprint 3","text":"<p>Data: 14/05/2025 Hora Prevista: 14:00 - 16:00 Hora Realizada: 14:00 - 16:00 Local: Presencial  </p>"},{"location":"atas/ata4/#participantes","title":"Participantes","text":"<ul> <li>Jo\u00e3o Pedro Costa  </li> <li>Tiago Albuquerque  </li> <li>Isabelle Costa  </li> <li>Filipe Bressanelli</li> <li>Jo\u00e3o Pedro Ferreira</li> </ul>"},{"location":"atas/ata4/#pauta-da-reuniao","title":"Pauta da Reuni\u00e3o","text":"<ol> <li>Encerramento da Sprint e revis\u00e3o do progresso.</li> <li>Testar a integra\u00e7\u00e3o entre o analisador l\u00e9xico e o sint\u00e1tico, incluindo a AST e a tabela de s\u00edmbolos.</li> <li>Atualizar a documenta\u00e7\u00e3o no diret\u00f3rio <code>docs/</code>.</li> </ol>"},{"location":"atas/ata4/#decisoes-tomadas","title":"Decis\u00f5es Tomadas","text":"<ul> <li>Defini\u00e7\u00e3o de tarefas:<ul> <li>Realizar os testes de integra\u00e7\u00e3o entre o analisador l\u00e9xico e o sint\u00e1tico.</li> <li>Revisar a AST e a tabela de s\u00edmbolos.</li> <li>Registrar os erros encontrados durante os testes.</li> <li>Troca de responsabilidades entre os membros da equipe para otimizar o fluxo de trabalho.</li> </ul> </li> <li>Respons\u00e1veis pelos testes: Jo\u00e3o e Felipe</li> <li>Respons\u00e1veis pelas mensagens de erro: Jo\u00e3o Pedro e Felipe Nunes de Mello.</li> <li>Ajustes: Criar uma aba de ajustes no README.  </li> </ul>"},{"location":"atas/ata4/#proximos-passos","title":"Pr\u00f3ximos Passos","text":""},{"location":"atas/ata4/#seguir-para-sprint-4-com-foco-na-implementacao-do-analisador-semantico-e-na-geracao-de-codigo-intermediario","title":"Seguir para sprint 4, com foco na implementa\u00e7\u00e3o do analisador sem\u00e2ntico e na gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio.","text":""},{"location":"atas/ata5/","title":"Ata da Reuni\u00e3o - Sprint 4","text":"<p>Data: 28/05/2025 Hora Prevista: 14:00 - 16:00 Hora Realizada: 14:00 - 16:00 Local: Presencial  </p>"},{"location":"atas/ata5/#pauta-da-reuniao","title":"Pauta da Reuni\u00e3o","text":"<ol> <li>Revis\u00e3o do progresso.</li> </ol>"},{"location":"atas/ata5/#o-que-foi-feito","title":"O que foi feito","text":"<ul> <li>Foco nas mensagens de erro.</li> <li>Foco na AST.</li> <li>Foco na tabela de s\u00edmbolos.</li> </ul>"},{"location":"atas/ata5/#proximos-passos","title":"Pr\u00f3ximos Passos","text":""},{"location":"atas/ata5/#seguir-para-sprint-4-com-foco-na-implementacao-do-analisador-semantico-e-na-geracao-de-codigo-intermediario-ficar-pronto-para-o-ponto-de-controle-2","title":"Seguir para sprint 4, com foco na implementa\u00e7\u00e3o do analisador sem\u00e2ntico e na gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio. Ficar pronto para o ponto de controle 2.","text":""},{"location":"atividades_semanais/Semana1/","title":"Semana 1 - Hello World","text":"<p>Na primeira semana, realizamos a instala\u00e7\u00e3o e configura\u00e7\u00e3o do ambiente de desenvolvimento e fizemos a implementa\u00e7\u00e3o b\u00e1sica e testes inicias.</p>"},{"location":"atividades_semanais/Semana1/#s-atividades-realizadas","title":"S Atividades realizadas","text":"<ul> <li>Realizamos a implementa\u00e7\u00e3o de dois principais exemplos, ambos utilizando as ferramentas Flex e Bison;</li> <li>O primeiro se referia \u00e0 implementa\u00e7\u00e3o de um exemplo simples de \"Hello World\";</li> <li>O segundo se referia \u00e0 implementa\u00e7\u00e3o de uma simples calculadora que aceitava uma cadeia de n\u00fameros e s\u00edmbolos.</li> </ul> <p>Os exemplos permitiram enteder o funcionamento e implementa\u00e7\u00e3o inicial de um compilador, entendendo o processo de an\u00e1lise l\u00e9xica e sint\u00e1tica realizada pelas ferramentas utilizadas.</p> <p>Segue o guia para compilar o exemplo \"Hello World\" que est\u00e1 na pasta \"semana 1\":</p>"},{"location":"atividades_semanais/Semana1/#compilando-e-executando-o-exemplo-hellol-helloy","title":"Compilando e executando o exemplo <code>hello.l</code> + <code>hello.y</code>","text":"<p>Para compilar e executar o exemplo, siga os passos abaixo:</p> <ol> <li> <p>Gerar os arquivos do Bison (no terminal, no mesmo diret\u00f3rio):     <code>bash     bison -d hello.y</code></p> <ul> <li>Isso criar\u00e1 o hello.tab.c (com o c\u00f3digo C do parser) e o hello.tab.h (com as defini\u00e7\u00f5es dos tokens).</li> </ul> </li> <li> <p>Gerar o arquivo do Flex:     <code>bash     flex hello.l</code></p> <ul> <li>Isso criar\u00e1 o lex.yy.c (c\u00f3digo C do analisador l\u00e9xico).</li> </ul> </li> <li> <p>Compilar tudo junto (usando o gcc ou outro compilador C):     <code>bash     gcc -o hello hello.tab.c lex.yy.c -lfl</code></p> <ul> <li>A op\u00e7\u00e3o <code>-lfl</code> linka a biblioteca do Flex (em algumas distribui\u00e7\u00f5es, pode ser necess\u00e1rio usar <code>-ll</code>).</li> </ul> </li> <li> <p>Executar o bin\u00e1rio gerado:     <code>bash     ./hello</code></p> <ul> <li>Se voc\u00ea digitar HelloWorld (ou usar um arquivo de entrada contendo <code>Hello World</code>), o parser deve reconhecer e imprimir Hello, World! na tela, conforme as regras de gram\u00e1tica definidas.</li> </ul> </li> </ol>"},{"location":"atividades_semanais/Semana10/","title":"Semana 10 \u2013 Gera\u00e7\u00e3o de Bitcode Simples","text":"<p>Na d\u00e9cima semana, finalizamos o ciclo do compilador com a gera\u00e7\u00e3o de c\u00f3digo em formato de bitcode textual, a partir de c\u00f3digo-fonte Java simples, utilizando Flex e Bison.</p>"},{"location":"atividades_semanais/Semana10/#atividades-realizadas","title":"Atividades Realizadas","text":"<p>Durante a semana, o foco foi transformar comandos de atribui\u00e7\u00e3o e express\u00f5es aritm\u00e9ticas em uma sequ\u00eancia de instru\u00e7\u00f5es intermedi\u00e1rias (bitcode), aproximando o compilador de um backend real.</p> <p>As principais atividades desenvolvidas foram:</p> <ul> <li>Implementa\u00e7\u00e3o da gera\u00e7\u00e3o de bitcode: criamos fun\u00e7\u00f5es para percorrer a AST e gerar instru\u00e7\u00f5es como <code>LOAD_CONST</code>, <code>ADD</code> e <code>STORE</code>.</li> <li>Testes com arquivos Java de entrada: validamos a gera\u00e7\u00e3o correta do bitcode para diferentes exemplos de atribui\u00e7\u00e3o e opera\u00e7\u00f5es.</li> <li>Automa\u00e7\u00e3o de testes: utilizamos scripts e arquivos de teste para rodar exemplos automaticamente e verificar a sa\u00edda do bitcode.</li> </ul> <p>Essas atividades consolidaram o entendimento do processo de tradu\u00e7\u00e3o de c\u00f3digo fonte para uma representa\u00e7\u00e3o intermedi\u00e1ria execut\u00e1vel.</p>"},{"location":"atividades_semanais/Semana10/#compilando-e-executando-o-exemplo","title":"Compilando e executando o exemplo","text":"<ol> <li>Gerar os arquivos necess\u00e1rios    Dentro da pasta do projeto:    <code>bash    make</code></li> <li> <p>Isso gera o execut\u00e1vel respons\u00e1vel pela an\u00e1lise e gera\u00e7\u00e3o de bitcode.</p> </li> <li> <p>Executar os testes <code>bash    make test</code></p> </li> <li> <p>O alvo <code>test</code> executa o programa para cada arquivo em <code>tests/</code>, exibindo a entrada e a sa\u00edda em bitcode.</p> </li> <li> <p>Verificar a sa\u00edda </p> </li> <li> <p>O programa imprime o bitcode correspondente \u00e0s opera\u00e7\u00f5es do c\u00f3digo-fonte Java analisado.</p> </li> <li> <p>Limpar arquivos gerados    Para remover arquivos intermedi\u00e1rios e o execut\u00e1vel:    <code>bash    make clean</code></p> </li> </ol>"},{"location":"atividades_semanais/Semana2/","title":"Semana 2 - Analisador","text":"<p>Na segunda semana, avan\u00e7amos no uso das ferramentas Flex e Bison, implementando um analisador mais complexo que reconhece n\u00fameros e processa entradas.</p>"},{"location":"atividades_semanais/Semana2/#atividades-realizadas","title":"Atividades Realizadas","text":"<p>Durante a segunda semana, focamos no desenvolvimento de um analisador l\u00e9xico e sint\u00e1tico mais robusto, utilizando novamente as ferramentas Flex e Bison.</p> <p>As atividades principais realizadas foram:</p> <ul> <li>Implementa\u00e7\u00e3o de um analisador de n\u00fameros: criamos regras no Flex para reconhecer n\u00fameros inteiros (positivos e negativos), usando express\u00f5es regulares.</li> <li>Defini\u00e7\u00e3o de uma gram\u00e1tica simples no Bison: definimos regras para que o parser pudesse interpretar as entradas recebidas, associando-as a a\u00e7\u00f5es espec\u00edficas, como imprimir o n\u00famero lido.</li> <li>Configura\u00e7\u00e3o do fluxo de entrada: testamos tanto a entrada manual no terminal quanto a leitura de dados a partir de um arquivo (<code>entrada.txt</code>), garantindo flexibilidade na forma de uso do programa.</li> <li>Tratamento de entradas inv\u00e1lidas: deixamos o analisador preparado para lidar com caracteres n\u00e3o reconhecidos, com a possibilidade de estender o tratamento de erros caso necess\u00e1rio.</li> </ul> <p>Al\u00e9m da pr\u00e1tica de programa\u00e7\u00e3o, tamb\u00e9m aprofundamos nossos estudos: - Revisamos o funcionamento da comunica\u00e7\u00e3o entre o analisador l\u00e9xico (Flex) e o sint\u00e1tico (Bison). - Entendemos melhor como o Flex gera tokens e como o Bison organiza a l\u00f3gica de parser atrav\u00e9s das produ\u00e7\u00f5es e a\u00e7\u00f5es associadas. - Aprendemos como compilar e linkar corretamente os arquivos gerados, ajustando comandos conforme o ambiente de desenvolvimento.</p> <p>Essas atividades ajudaram a consolidar a base para projetos mais complexos nas pr\u00f3ximas semanas.</p>"},{"location":"atividades_semanais/Semana2/#compilando-e-executando-o-exemplo-exemplol-exemploy","title":"Compilando e executando o exemplo <code>exemplo.l</code> + <code>exemplo.y</code>","text":"<ol> <li> <p>Gerar o arquivo do Bison <code>bash     bison -d exemplo.y</code></p> <ul> <li>Isso criar\u00e1 dois arquivos: <code>exemplo.tab.c</code> e <code>exemplo.tab.h</code> (o <code>-d</code> gera o <code>.h</code> que cont\u00e9m as defini\u00e7\u00f5es dos tokens).</li> </ul> </li> <li> <p>Gerar o arquivo do Flex <code>bash     flex exemplo.l</code></p> <ul> <li>Isso criar\u00e1 um arquivo <code>lex.yy.c</code>.</li> </ul> </li> <li> <p>Compilar tudo junto     Use um compilador C (por exemplo, gcc) para gerar o execut\u00e1vel:     <code>bash     gcc -o parser exemplo.tab.c lex.yy.c -lfl</code></p> <ul> <li>A op\u00e7\u00e3o <code>-lfl</code> linka a biblioteca do Flex. Em algumas distros, pode ser necess\u00e1rio <code>-ll</code> (ou <code>-lfl -ll</code>) dependendo das vers\u00f5es, mas normalmente <code>-lfl</code> \u00e9 suficiente.</li> </ul> </li> <li> <p>Executar o programa </p> <ul> <li>Se quiser digitar manualmente os dados:   <code>bash   ./parser</code>   Em seguida, digite os n\u00fameros na tela e pressione Enter ao final de cada. Para encerrar, pressione <code>Ctrl+D</code> (em sistemas Unix) ou <code>Ctrl+Z</code> (em Windows).</li> <li>Se quiser processar o arquivo <code>entrada.txt</code>:   <code>bash   ./parser entrada.txt</code></li> </ul> </li> <li> <p>Verificar a sa\u00edda </p> <ul> <li>A cada n\u00famero reconhecido, o programa imprime <code>N\u00famero lido: &lt;valor&gt;</code>.</li> <li>O que n\u00e3o bater com <code>[+\\-]?[0-9]{1,10}</code> ser\u00e1 ignorado ou tratado conforme suas regras.  </li> <li>Caso queira tratar caracteres n\u00e3o reconhecidos como erro, basta ajustar a regra <code>.</code> no arquivo <code>.l</code> para gerar alguma mensagem ou retornar um token de erro.</li> </ul> </li> </ol>"},{"location":"atividades_semanais/Semana3/","title":"Semana 3 - Analisador L\u00e9xico Inicial","text":"<p>Na terceira semana, realizamos a implementa\u00e7\u00e3o inicial do analisador l\u00e9xico do compilador. </p> <p>Adicionamos os tokens conforme a linguagem definida, incluindo: - Palavras-chave, - N\u00fameros, - Identificadores, - S\u00edmbolos.</p> <p>Essa etapa foi essencial para identificar e categorizar os elementos b\u00e1sicos do c\u00f3digo-fonte, garantindo que o compilador reconhe\u00e7a corretamente os componentes da linguagem alvo.</p> <p>O trabalho foi baseado no conte\u00fado apresentado durante a aula pr\u00e1tica, com foco na cria\u00e7\u00e3o do arquivo scanner.l.</p>"},{"location":"atividades_semanais/Semana3/#arquivo-inicial-scannerl","title":"Arquivo inicial \"scanner.l\"","text":"<pre><code>%{\n#include &lt;stdio.h&gt;\n%}\n\n/* Defini\u00e7\u00f5es de padr\u00f5es de token e a\u00e7\u00f5es */\n%%\n\nif          { printf(\"KW_IF\\n\"); }\nwhile       { printf(\"KW_WHILE\\n\"); }\n\n\"//\".*     { /* Ignorar coment\u00e1rios de linha */ }\n\n\"/*\"([^*]|\\*+[^*/])*\\*+\\/    { /* Ignorar coment\u00e1rios de bloco */ }\n\n[a-zA-Z_][a-zA-Z0-9_]*  { printf(\"IDENT(%s)\\n\", yytext); }\n\n[0-9]+(\\.[0-9]+)?  { printf(\"NUMBER(%s)\\n\", yytext); }\n\n[+\\-*/=]   { printf(\"OPERATOR(%s)\\n\", yytext); }\n\n[ \\t\\n]+  { /* N\u00e3o faz nada */ }\n\n.  { printf(\"UNKNOWN(%s)\\n\", yytext); }\n\n%%\n\n/* Fun\u00e7\u00e3o auxiliar do Flex (quando termina o arquivo de entrada) */\nint yywrap(void) {\n    return 1;\n}\n\n/* Fun\u00e7\u00e3o principal: executa o analisador l\u00e9xico */\nint main(void) {\n    yylex();\n    return 0;\n}\n</code></pre>"},{"location":"atividades_semanais/Semana4/","title":"Semana 4 \u2013 Compilador de Express\u00f5es Aritm\u00e9ticas","text":"<p>Na quarta semana, avan\u00e7amos no desenvolvimento do compilador, implementando um analisador l\u00e9xico e sint\u00e1tico capaz de reconhecer e validar express\u00f5es aritm\u00e9ticas b\u00e1sicas, utilizando as ferramentas Flex e Bison.</p>"},{"location":"atividades_semanais/Semana4/#atividades-realizadas","title":"Atividades Realizadas","text":"<p>Durante a semana, focamos na constru\u00e7\u00e3o de um analisador que reconhece express\u00f5es envolvendo soma, subtra\u00e7\u00e3o, multiplica\u00e7\u00e3o, divis\u00e3o e par\u00eanteses, respeitando a preced\u00eancia dos operadores.</p> <p>As principais atividades desenvolvidas foram:</p> <ul> <li>Implementa\u00e7\u00e3o do analisador l\u00e9xico: criamos regras no Flex para identificar n\u00fameros, operadores aritm\u00e9ticos e par\u00eanteses.</li> <li>Defini\u00e7\u00e3o da gram\u00e1tica no Bison: estabelecemos regras para que o parser reconhecesse corretamente as express\u00f5es, incluindo a preced\u00eancia dos operadores.</li> <li>Automatiza\u00e7\u00e3o da compila\u00e7\u00e3o: utilizamos um Makefile para facilitar o processo de gera\u00e7\u00e3o dos arquivos e do execut\u00e1vel.</li> <li>Testes com diferentes entradas: validamos o funcionamento do analisador com express\u00f5es v\u00e1lidas e inv\u00e1lidas, observando o comportamento do parser.</li> </ul> <p>Al\u00e9m da implementa\u00e7\u00e3o, revisamos conceitos de preced\u00eancia e associatividade de operadores, fundamentais para a correta an\u00e1lise das express\u00f5es.</p> <p>Essas atividades consolidaram a base para a evolu\u00e7\u00e3o do compilador nas pr\u00f3ximas semanas.</p>"},{"location":"atividades_semanais/Semana4/#compilando-e-executando-o-exemplo","title":"Compilando e executando o exemplo","text":"<ol> <li>Gerar os arquivos necess\u00e1rios    Dentro da pasta <code>src</code>:    <code>bash    make</code></li> <li> <p>Isso executa o Bison, o Flex e o compilador C, gerando o execut\u00e1vel <code>parser</code>.</p> </li> <li> <p>Executar o programa <code>bash    ./parser</code></p> </li> <li>Digite uma express\u00e3o aritm\u00e9tica (ex: <code>3+4*2</code>) e pressione Ctrl+D (Linux/macOS) ou Ctrl+Z (Windows) para finalizar a entrada.</li> <li> <p>Tamb\u00e9m \u00e9 poss\u00edvel executar com entrada direta:      <code>bash      echo \"3+4*2\" | ./parser</code></p> </li> <li> <p>Verificar a sa\u00edda </p> </li> <li>Se a express\u00e3o for reconhecida corretamente, o programa encerra silenciosamente.</li> <li> <p>Em caso de erro sint\u00e1tico, ser\u00e1 exibida uma mensagem de erro.</p> </li> <li> <p>Limpar arquivos gerados    Para remover arquivos intermedi\u00e1rios e o execut\u00e1vel:    <code>bash    make clean</code></p> </li> </ol> <p>Projeto focado em consolidar o uso de Flex e Bison para an\u00e1lise l\u00e9xica e sint\u00e1tica, com \u00eanfase em preced\u00eancia de operadores e estrutura b\u00e1sica de um compilador de express\u00f5es. </p>"},{"location":"atividades_semanais/Semana5/","title":"Semana 5 \u2013 Parser com Tratamento de Erros e Preced\u00eancia","text":"<p>Na quinta semana, demos continuidade ao desenvolvimento do compilador, aprimorando o parser para lidar com erros sint\u00e1ticos e implementar preced\u00eancia de operadores, utilizando Flex e Bison.</p>"},{"location":"atividades_semanais/Semana5/#atividades-realizadas","title":"Atividades Realizadas","text":"<p>Durante a semana, o foco foi tornar o analisador mais robusto, capaz de reconhecer express\u00f5es aritm\u00e9ticas completas, tratar erros e continuar a an\u00e1lise ap\u00f3s encontrar problemas na entrada.</p> <p>As principais atividades desenvolvidas foram:</p> <ul> <li>Implementa\u00e7\u00e3o de regras gramaticais no Bison: definimos uma gram\u00e1tica para express\u00f5es aritm\u00e9ticas, exigindo que cada express\u00e3o termine com <code>;</code> e utilizando declara\u00e7\u00f5es de preced\u00eancia para evitar conflitos.</li> <li>Tratamento de erros sint\u00e1ticos: adicionamos regras para detectar e recuperar de erros, permitindo que o parser continue analisando as pr\u00f3ximas express\u00f5es.</li> <li>Ajuste do analisador l\u00e9xico: o Flex foi configurado para reconhecer n\u00fameros, operadores, par\u00eanteses e ponto e v\u00edrgula, al\u00e9m de ignorar espa\u00e7os e emitir mensagens para caracteres desconhecidos.</li> <li>Automatiza\u00e7\u00e3o da compila\u00e7\u00e3o: utilizamos um Makefile para facilitar o processo de gera\u00e7\u00e3o dos arquivos e do execut\u00e1vel.</li> <li>Testes com entradas v\u00e1lidas e inv\u00e1lidas: verificamos o comportamento do parser diante de diferentes cen\u00e1rios, observando a recupera\u00e7\u00e3o de erros e a correta avalia\u00e7\u00e3o das express\u00f5es.</li> </ul> <p>Essas atividades fortaleceram a base do compilador, preparando-o para lidar com entradas mais complexas e erros de forma eficiente.</p>"},{"location":"atividades_semanais/Semana5/#compilando-e-executando-o-exemplo","title":"Compilando e executando o exemplo","text":"<ol> <li>Gerar os arquivos necess\u00e1rios    Dentro da pasta <code>src</code>:    <code>bash    make</code></li> <li> <p>Isso executa o Bison, o Flex e o compilador C, gerando o execut\u00e1vel <code>parser</code>.</p> </li> <li> <p>Executar o programa <code>bash    ./parser</code></p> </li> <li> <p>Digite express\u00f5es aritm\u00e9ticas terminadas com <code>;</code> (ex: <code>3+4*2;</code>). Pressione Ctrl+D (Linux/macOS) ou Ctrl+Z (Windows) para encerrar.</p> </li> <li> <p>Verificar a sa\u00edda </p> </li> <li>O parser imprime o resultado de cada express\u00e3o reconhecida.</li> <li> <p>Em caso de erro sint\u00e1tico, exibe uma mensagem e recupera at\u00e9 o pr\u00f3ximo <code>;</code>, permitindo continuar a an\u00e1lise das pr\u00f3ximas express\u00f5es.</p> </li> <li> <p>Limpar arquivos gerados    Para remover arquivos intermedi\u00e1rios e o execut\u00e1vel:    <code>bash    make clean</code></p> </li> </ol> <p>Esta semana foi dedicada ao aprimoramento do parser, com foco em robustez, tratamento de erros e preced\u00eancia de operadores, preparando a base para futuras extens\u00f5es do compilador. </p>"},{"location":"atividades_semanais/Semana6/","title":"Semana 6 \u2013 AST e Tabela de S\u00edmbolos","text":"<p>Na sexta semana, avan\u00e7amos na implementa\u00e7\u00e3o de estruturas internas essenciais para o compilador: a \u00c1rvore Sint\u00e1tica Abstrata (AST) e a Tabela de S\u00edmbolos, utilizando Flex e Bison.</p>"},{"location":"atividades_semanais/Semana6/#atividades-realizadas","title":"Atividades Realizadas","text":"<p>Durante a semana, o foco foi construir mecanismos para representar a estrutura do c\u00f3digo-fonte e armazenar informa\u00e7\u00f5es sobre identificadores.</p> <p>As principais atividades desenvolvidas foram:</p> <ul> <li>Implementa\u00e7\u00e3o da AST: criamos fun\u00e7\u00f5es e estruturas para construir e exibir a \u00e1rvore sint\u00e1tica abstrata das express\u00f5es analisadas.</li> <li>Implementa\u00e7\u00e3o da Tabela de S\u00edmbolos: desenvolvemos uma tabela para registrar identificadores e seus tipos.</li> <li>Integra\u00e7\u00e3o com o analisador l\u00e9xico e sint\u00e1tico: conectamos a gera\u00e7\u00e3o da AST e o preenchimento da tabela de s\u00edmbolos ao parser e scanner.</li> <li>Testes com entradas v\u00e1lidas e inv\u00e1lidas: verificamos a constru\u00e7\u00e3o da AST, o preenchimento correto da tabela e a emiss\u00e3o de mensagens de erro para casos l\u00e9xicos e sint\u00e1ticos.</li> </ul> <p>Essas atividades consolidaram a base para a an\u00e1lise sem\u00e2ntica e a evolu\u00e7\u00e3o do compilador.</p>"},{"location":"atividades_semanais/Semana6/#compilando-e-executando-o-exemplo","title":"Compilando e executando o exemplo","text":"<ol> <li>Gerar os arquivos necess\u00e1rios    Dentro da pasta <code>src</code>:    <code>bash    make</code></li> <li> <p>Isso executa o Bison, o Flex e o compilador C, gerando o execut\u00e1vel <code>parser</code>.</p> </li> <li> <p>Executar o programa <code>bash    ./parser</code></p> </li> <li> <p>Digite express\u00f5es ou comandos e pressione Ctrl+D (Linux/macOS) para finalizar a entrada.</p> </li> <li> <p>Verificar a sa\u00edda </p> </li> <li>O programa exibe a AST constru\u00edda e a tabela de s\u00edmbolos.</li> <li> <p>Em caso de erro l\u00e9xico ou sint\u00e1tico, exibe mensagens claras indicando o problema.</p> </li> <li> <p>Limpar arquivos gerados    Para remover arquivos intermedi\u00e1rios e o execut\u00e1vel:    <code>bash    make clean</code></p> </li> </ol>"},{"location":"atividades_semanais/Semana7/","title":"Semana 7 \u2013 An\u00e1lise Sem\u00e2ntica: Tipos e Escopo","text":"<p>Na s\u00e9tima semana, integramos a an\u00e1lise sem\u00e2ntica ao compilador, adicionando verifica\u00e7\u00e3o de tipos e escopo, al\u00e9m de aprimorar a manipula\u00e7\u00e3o da AST, utilizando Flex e Bison.</p>"},{"location":"atividades_semanais/Semana7/#atividades-realizadas","title":"Atividades Realizadas","text":"<p>Durante a semana, o foco foi garantir a corre\u00e7\u00e3o sem\u00e2ntica do c\u00f3digo analisado, detectando erros de declara\u00e7\u00e3o, tipos e escopo.</p> <p>As principais atividades desenvolvidas foram:</p> <ul> <li>Verifica\u00e7\u00e3o de declara\u00e7\u00e3o de vari\u00e1veis: o compilador passou a identificar o uso de vari\u00e1veis n\u00e3o declaradas.</li> <li>Detec\u00e7\u00e3o de redeclara\u00e7\u00e3o: implementamos mecanismos para impedir que uma vari\u00e1vel seja declarada mais de uma vez.</li> <li>Verifica\u00e7\u00e3o de compatibilidade de tipos: o parser agora detecta atribui\u00e7\u00f5es e opera\u00e7\u00f5es com tipos incompat\u00edveis.</li> <li>Anota\u00e7\u00e3o da AST com tipos: a \u00e1rvore sint\u00e1tica abstrata passou a registrar informa\u00e7\u00f5es de tipo para cada n\u00f3.</li> <li>Testes automatizados: utilizamos arquivos de teste para validar casos de sucesso e erro, garantindo robustez na an\u00e1lise sem\u00e2ntica.</li> </ul> <p>Essas atividades fortaleceram a base para a gera\u00e7\u00e3o de c\u00f3digo e a evolu\u00e7\u00e3o do compilador.</p>"},{"location":"atividades_semanais/Semana7/#compilando-e-executando-o-exemplo","title":"Compilando e executando o exemplo","text":"<ol> <li>Gerar os arquivos necess\u00e1rios    Dentro da pasta <code>src</code>:    <code>bash    make</code></li> <li> <p>Isso executa o Bison, o Flex e o compilador C, gerando o execut\u00e1vel <code>parser</code>.</p> </li> <li> <p>Executar o programa <code>bash    ./parser</code></p> </li> <li> <p>Digite comandos e express\u00f5es, pressionando Ctrl+D (Linux/macOS) para finalizar a entrada.</p> </li> <li> <p>Testes automatizados </p> </li> <li>Para rodar os testes autom\u00e1ticos:      <code>bash      ./run_tests.sh</code></li> <li> <p>Os arquivos de teste cobrem casos v\u00e1lidos e inv\u00e1lidos de declara\u00e7\u00e3o, atribui\u00e7\u00e3o e tipos.</p> </li> <li> <p>Verificar a sa\u00edda </p> </li> <li> <p>O programa exibe mensagens de sucesso ou erro conforme a an\u00e1lise sem\u00e2ntica.</p> </li> <li> <p>Limpar arquivos gerados    Para remover arquivos intermedi\u00e1rios e o execut\u00e1vel:    <code>bash    make clean</code></p> </li> </ol>"},{"location":"atividades_semanais/Semana8/","title":"Semana 8 \u2013 Gera\u00e7\u00e3o de C\u00f3digo Intermedi\u00e1rio (TAC)","text":"<p>Na oitava semana, avan\u00e7amos para a etapa de gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio, implementando a produ\u00e7\u00e3o de C\u00f3digo de Tr\u00eas Endere\u00e7os (TAC) a partir da AST, utilizando Flex e Bison.</p>"},{"location":"atividades_semanais/Semana8/#atividades-realizadas","title":"Atividades Realizadas","text":"<p>Durante a semana, o foco foi transformar a \u00e1rvore sint\u00e1tica abstrata em uma sequ\u00eancia de instru\u00e7\u00f5es intermedi\u00e1rias, facilitando etapas futuras de otimiza\u00e7\u00e3o e gera\u00e7\u00e3o de c\u00f3digo final.</p> <p>As principais atividades desenvolvidas foram:</p> <ul> <li>Implementa\u00e7\u00e3o da gera\u00e7\u00e3o de TAC: criamos fun\u00e7\u00f5es para percorrer a AST e gerar instru\u00e7\u00f5es de tr\u00eas endere\u00e7os correspondentes \u00e0s opera\u00e7\u00f5es analisadas.</li> <li>Testes com express\u00f5es aritm\u00e9ticas e atribui\u00e7\u00f5es: validamos a gera\u00e7\u00e3o correta do TAC para diferentes entradas.</li> <li>Automa\u00e7\u00e3o de testes: utilizamos scripts para rodar exemplos automaticamente e verificar a sa\u00edda do c\u00f3digo intermedi\u00e1rio.</li> </ul> <p>Essas atividades consolidaram a ponte entre a an\u00e1lise sint\u00e1tica/sem\u00e2ntica e a gera\u00e7\u00e3o de c\u00f3digo.</p>"},{"location":"atividades_semanais/Semana8/#compilando-e-executando-o-exemplo","title":"Compilando e executando o exemplo","text":"<ol> <li>Gerar os arquivos necess\u00e1rios    Dentro da pasta <code>src</code>:    <code>bash    make</code></li> <li> <p>Isso gera o execut\u00e1vel <code>main</code>.</p> </li> <li> <p>Executar o programa <code>bash    ./main</code></p> </li> <li> <p>Digite express\u00f5es ou comandos e pressione Ctrl+D (Linux/macOS) para finalizar a entrada.</p> </li> <li> <p>Verificar a sa\u00edda </p> </li> <li> <p>O programa imprime o c\u00f3digo TAC gerado para as express\u00f5es analisadas.</p> </li> <li> <p>Testes automatizados </p> </li> <li>Para rodar os testes autom\u00e1ticos:      <code>bash      ./run_tests.sh</code></li> <li> <p>Os arquivos de teste cobrem diferentes exemplos de express\u00f5es e atribui\u00e7\u00f5es.</p> </li> <li> <p>Limpar arquivos gerados    Para remover arquivos intermedi\u00e1rios e o execut\u00e1vel:    <code>bash    make clean</code></p> </li> </ol>"},{"location":"atividades_semanais/Semana9/","title":"Semana 9 \u2013 Otimiza\u00e7\u00e3o de C\u00f3digo (Constant Folding)","text":"<p>Na nona semana, o foco foi a otimiza\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio, implementando t\u00e9cnicas de simplifica\u00e7\u00e3o de express\u00f5es constantes (constant folding) utilizando Flex e Bison.</p>"},{"location":"atividades_semanais/Semana9/#atividades-realizadas","title":"Atividades Realizadas","text":"<p>Durante a semana, aprimoramos o compilador para identificar e simplificar opera\u00e7\u00f5es envolvendo apenas constantes, tornando o c\u00f3digo gerado mais eficiente.</p> <p>As principais atividades desenvolvidas foram:</p> <ul> <li>Implementa\u00e7\u00e3o do constant folding: criamos fun\u00e7\u00f5es para percorrer a AST e substituir opera\u00e7\u00f5es entre constantes por seus resultados.</li> <li>Testes com diferentes express\u00f5es: validamos a otimiza\u00e7\u00e3o em casos simples e compostos, garantindo que apenas express\u00f5es constantes fossem simplificadas.</li> <li>Automa\u00e7\u00e3o de testes: utilizamos arquivos de entrada e scripts para rodar exemplos automaticamente e comparar a sa\u00edda otimizada.</li> </ul> <p>Essas atividades fortaleceram a etapa de otimiza\u00e7\u00e3o do compilador, preparando-o para gerar c\u00f3digo mais eficiente.</p>"},{"location":"atividades_semanais/Semana9/#compilando-e-executando-o-exemplo","title":"Compilando e executando o exemplo","text":"<ol> <li>Gerar os arquivos necess\u00e1rios    No diret\u00f3rio raiz do projeto:    <code>bash    make</code></li> <li> <p>Isso gera o execut\u00e1vel <code>optimize</code>.</p> </li> <li> <p>Executar os testes <code>bash    make test</code></p> </li> <li> <p>O alvo <code>test</code> executa o programa para cada arquivo em <code>tests/</code>, exibindo entrada e sa\u00edda.</p> </li> <li> <p>Verificar a sa\u00edda </p> </li> <li> <p>O programa imprime a vers\u00e3o otimizada das express\u00f5es analisadas.</p> </li> <li> <p>Limpar arquivos gerados    Para remover arquivos intermedi\u00e1rios e o execut\u00e1vel:    <code>bash    make clean</code></p> </li> </ol>"},{"location":"decisoes/decisao/","title":"Decis\u00f5es T\u00e9cnicas","text":"<p>Este documento descreve as principais decis\u00f5es t\u00e9cnicas tomadas durante o desenvolvimento do compilador de Python para C, utilizando Flex e Bison.</p>"},{"location":"decisoes/decisao/#linguagens-e-ferramentas-utilizadas","title":"Linguagens e Ferramentas Utilizadas","text":"<ul> <li>Flex: Ferramenta escolhida para a an\u00e1lise l\u00e9xica, respons\u00e1vel por identificar tokens no c\u00f3digo Python.</li> <li>Bison: Ferramenta utilizada para a an\u00e1lise sint\u00e1tica, respons\u00e1vel por validar a gram\u00e1tica e gerar a \u00e1rvore sint\u00e1tica.</li> <li>MkDocs: Ferramenta para documenta\u00e7\u00e3o do projeto, com o tema Material Design para uma interface moderna e organizada.</li> </ul>"},{"location":"decisoes/decisao/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<ul> <li>Organiza\u00e7\u00e3o Modular: O projeto foi dividido em diret\u00f3rios espec\u00edficos para c\u00f3digo-fonte, documenta\u00e7\u00e3o, materiais de estudo e vers\u00f5es semanais.</li> <li>Reposit\u00f3rio Git: Utilizado para controle de vers\u00e3o, com branches organizados para cada funcionalidade ou sprint.</li> </ul>"},{"location":"decisoes/decisao/#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do Ambiente","text":"<ul> <li>Depend\u00eancias:</li> <li>Flex e Bison devem estar instalados no sistema.</li> <li>Em distribui\u00e7\u00f5es Linux baseadas em Debian/Ubuntu:     <code>bash     sudo apt-get install flex bison</code></li> <li>Compila\u00e7\u00e3o:</li> <li>O compilador \u00e9 gerado utilizando o GCC:     <code>bash     gcc -o compilador parser.tab.c lex.yy.c -lfl</code></li> </ul>"},{"location":"decisoes/decisao/#decisoes-de-design","title":"Decis\u00f5es de Design","text":"<ul> <li>Subconjunto de Python: O compilador suporta um subconjunto de Python, incluindo:</li> <li>Estruturas condicionais (<code>if</code>, <code>else</code>).</li> <li>Opera\u00e7\u00f5es aritm\u00e9ticas e l\u00f3gicas.</li> <li>Declara\u00e7\u00f5es de vari\u00e1veis simples.</li> <li>Gera\u00e7\u00e3o de C\u00f3digo C: Durante a an\u00e1lise sint\u00e1tica, o c\u00f3digo Python \u00e9 traduzido diretamente para C, com suporte a estruturas equivalentes.</li> </ul>"},{"location":"decisoes/decisao/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<ul> <li>Estrutura da Documenta\u00e7\u00e3o:</li> <li>Planejamento: Inclui cronograma, metodologia e planejamento das sprints.</li> <li>Atas de Reuni\u00e3o: Registro das decis\u00f5es tomadas em cada sprint.</li> <li>Atividades Semanais: Relat\u00f3rios de progresso semanais.</li> <li>Ponto de Controle: Relat\u00f3rios de marcos importantes no projeto.</li> <li>Tema do MkDocs:</li> <li>Tema Material Design com suporte a modo claro e escuro.</li> <li>\u00cdcones personalizados para navega\u00e7\u00e3o.</li> </ul>"},{"location":"decisoes/decisao/#fluxo-de-trabalho","title":"Fluxo de Trabalho","text":"<ul> <li>Branches no Git:</li> <li><code>main</code>: Branch principal com as vers\u00f5es est\u00e1veis.</li> <li><code>feat/&lt;nome&gt;</code>: Branches espec\u00edficas para cada funcionalidade ou tarefa.</li> <li>Commits:</li> <li>Mensagens de commit seguem o padr\u00e3o: <code>[Tipo]: Descri\u00e7\u00e3o breve</code>.</li> </ul>"},{"location":"decisoes/decisao/#justificativas","title":"Justificativas","text":"<ul> <li>Flex e Bison: Escolhidos por serem ferramentas amplamente utilizadas para constru\u00e7\u00e3o de compiladores, com boa integra\u00e7\u00e3o e suporte \u00e0 linguagem C.</li> <li>MkDocs: Escolhido para documenta\u00e7\u00e3o devido \u00e0 sua simplicidade e suporte a temas modernos.</li> </ul> <p>Essas decis\u00f5es t\u00e9cnicas foram tomadas para garantir que o projeto seja modular, eficiente e bem documentado, atendendo aos requisitos da disciplina e do compilador.</p>"},{"location":"planejamento/cronograma/","title":"Cronograma do Projeto de Compiladores","text":"Sprint Per\u00edodo Objetivos Principais Principais Entregas Tarefas Respons\u00e1veis Revisores Sprint 1 24/03 a 09/04 - Formar equipes, configurar ambiente e definir linguagem-fonte. - Documento inicial da linguagem. 1. Definir escopo do compilador. Todos Todos - Elaborar a gram\u00e1tica inicial. - Prot\u00f3tipo de gram\u00e1tica no Bison. 2. Configurar reposit\u00f3rio e ferramentas. Isabelle, Jo\u00e3o Pedro (johnaopedro) Filipe, Jo\u00e3o Pedro (JoaoPedro2206) - Ambiente configurado e testado. 3. Criar gram\u00e1tica inicial no Flex/Bison. Jo\u00e3o Pedro (johnaopedro), Tiago Isabelle, Filipe Sprint 2 10/04 a 30/04 - Concluir an\u00e1lise l\u00e9xica e iniciar an\u00e1lise sint\u00e1tica. - Analisador l\u00e9xico funcional. 1. Finalizar express\u00f5es regulares no Flex. Filipe, Jo\u00e3o Pedro (johnaopedro) Tiago, Isabelle - Preparar material para o P1. - Primeiras regras sint\u00e1ticas no Bison. 2. Iniciar parser no Bison. Tiago, Isabelle Filipe, Jo\u00e3o Pedro (johnaopedro) - Apresenta\u00e7\u00e3o do P1. 3. Preparar slides e formul\u00e1rio do P1. Jo\u00e3o Pedro (JoaoPedro2206), Filipe Tiago, Isabelle Sprint 3 01/05 a 14/05 - Evoluir o parser e iniciar an\u00e1lise sem\u00e2ntica. - Parser mais completo. 1. Estender regras gramaticais no Bison. Isabelle, Tiago Jo\u00e3o Pedro (JoaoPedro2206), Filipe - Implementar AST e tabela de s\u00edmbolos. - Estruturas de dados iniciais (AST e tabela de s\u00edmbolos). 2. Criar AST e tabela de s\u00edmbolos. Jo\u00e3o Pedro (JoaoPedro2206), Filipe Isabelle, Jo\u00e3o Pedro (johnaopedro) - Analisador sem\u00e2ntico b\u00e1sico. 3. Implementar verifica\u00e7\u00e3o de tipos e escopos. Jo\u00e3o Pedro (johnaopedro), Tiago Filipe, Isabelle Sprint 4 15/05 a 04/06 - Concluir an\u00e1lise sem\u00e2ntica. - Analisador sem\u00e2ntico robusto. 1. Refinar an\u00e1lise sem\u00e2ntica. Filipe, Isabelle Jo\u00e3o Pedro (JoaoPedro2206), Tiago - Implementar gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio. - M\u00f3dulo de c\u00f3digo intermedi\u00e1rio. 2. Criar gerador de c\u00f3digo intermedi\u00e1rio. Jo\u00e3o Pedro (johnaopedro), Tiago Filipe, Jo\u00e3o Pedro (JoaoPedro2206) - Apresenta\u00e7\u00e3o do P2. 3. Preparar apresenta\u00e7\u00e3o do P2. Jo\u00e3o Pedro (JoaoPedro2206), Isabelle Filipe, Tiago Sprint 5 05/06 a 25/06 - Implementar otimiza\u00e7\u00f5es e gera\u00e7\u00e3o de c\u00f3digo final. - M\u00f3dulo de otimiza\u00e7\u00e3o b\u00e1sico. 1. Implementar otimiza\u00e7\u00f5es simples. Tiago, Filipe Isabelle, Jo\u00e3o Pedro (JoaoPedro2206) - Realizar testes integrados. - Gera\u00e7\u00e3o de c\u00f3digo final. 2. Criar tradutor final para linguagem-alvo. Isabelle, Jo\u00e3o Pedro (JoaoPedro2206) Filipe, Jo\u00e3o Pedro (johnaopedro) - Compilador funcional. 3. Testar compilador de ponta a ponta. Jo\u00e3o Pedro (JoaoPedro2206), Tiago Isabelle, Filipe Sprint 6 26/06 a 09/07 - Realizar entrevistas finais. - Apresenta\u00e7\u00e3o do compilador nas entrevistas. 1. Participar das entrevistas finais. Jo\u00e3o Pedro (johnaopedro), Isabelle Filipe, Tiago - Concluir documenta\u00e7\u00e3o e ajustes finais. - Documenta\u00e7\u00e3o completa. 2. Corrigir pend\u00eancias e issues. Filipe, Jo\u00e3o Pedro (johnaopedro) Isabelle, Tiago"},{"location":"planejamento/ferramentas/","title":"Ferramentas Utilizadas","text":""},{"location":"planejamento/ferramentas/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este documento descreve as ferramentas adotadas no desenvolvimento deste trabalho, abrangendo aquelas j\u00e1 implementadas, em uso atual ou previstas para uso futuro. Cada ferramenta desempenha um papel crucial na execu\u00e7\u00e3o e apresenta\u00e7\u00e3o das tarefas realizadas pela equipe.</p> <p>A escolha adequada de ferramentas \u00e9 essencial para o sucesso de projetos de software. Segundo Flores (2022), ferramentas como Microsoft Project, Planner e JIRA s\u00e3o fundamentais para auxiliar gestores na distribui\u00e7\u00e3o, prioriza\u00e7\u00e3o e monitoramento de tarefas, visando \u00e0 efici\u00eancia e efic\u00e1cia do projeto. Al\u00e9m disso, Giocondo et al. (2021) destacam que o uso de ferramentas de gest\u00e3o de projetos, como SCRUM, Kanban, Microsoft Excel, Design Thinking, Azure DevOps e MS Project, contribui significativamente para a organiza\u00e7\u00e3o e acompanhamento das etapas do desenvolvimento de software.</p> <p>As ferramentas est\u00e3o apresentadas na Tabela 1, acompanhadas de seus logotipos e descri\u00e7\u00f5es.</p> <p>Tabela 1: Ferramentas Utilizadas</p> Logo Descri\u00e7\u00e3o Google Docs: Uma ferramenta poderosa para cria\u00e7\u00e3o, edi\u00e7\u00e3o e colabora\u00e7\u00e3o em documentos em tempo real. Ideal para elabora\u00e7\u00e3o de relat\u00f3rios, propostas e outros documentos relacionados ao projeto, com suporte para trabalho em equipe e acesso de qualquer lugar. Google Chrome: O navegador da web mais popular, utilizado para testar a funcionalidade dos sites, navegar por ferramentas e acessar recursos do projeto de forma r\u00e1pida e eficiente. Conhecido pela sua velocidade, seguran\u00e7a e compatibilidade com diversas tecnologias. Git: Sistema de controle de vers\u00e3o essencial para gerenciar altera\u00e7\u00f5es no c\u00f3digo-fonte, permitindo a colabora\u00e7\u00e3o entre os membros da equipe. Com Git, \u00e9 poss\u00edvel manter um hist\u00f3rico completo de modifica\u00e7\u00f5es e resolver conflitos de c\u00f3digo de forma organizada e eficiente. GitHub: Plataforma de hospedagem de c\u00f3digo-fonte que permite a colabora\u00e7\u00e3o em projetos de desenvolvimento de software. Oferece ferramentas para controle de vers\u00f5es, integra\u00e7\u00e3o cont\u00ednua e uma interface para visualiza\u00e7\u00e3o e revis\u00e3o de c\u00f3digo, facilitando a colabora\u00e7\u00e3o em equipe. Microsoft Teams: Plataforma de comunica\u00e7\u00e3o e colabora\u00e7\u00e3o em equipe, que integra chat, videoconfer\u00eancias, compartilhamento de arquivos e outras ferramentas. Ideal para reuni\u00f5es virtuais, gerenciamento de tarefas e discuss\u00e3o de ideias em tempo real. Telegram: Aplicativo de mensagens instant\u00e2neas usado como principal canal de comunica\u00e7\u00e3o da equipe. Permite troca r\u00e1pida de mensagens, envio de arquivos e cria\u00e7\u00e3o de grupos de discuss\u00e3o, ideal para manter todos atualizados e facilitar a intera\u00e7\u00e3o cont\u00ednua entre os membros. Visual Studio Code: Editor de c\u00f3digo-fonte altamente configur\u00e1vel e leve, utilizado para desenvolvimento de software. Suporta v\u00e1rias linguagens de programa\u00e7\u00e3o e oferece extens\u00f5es que facilitam a integra\u00e7\u00e3o com outras ferramentas e plataformas, como o GitHub, sendo essencial para o desenvolvimento do projeto. <p>Fonte: Jo\u00e3o Pedro Costa, 2025</p>"},{"location":"planejamento/ferramentas/#referencias","title":"Refer\u00eancias","text":"<p>FLORES, Lucas da Silva. Ferramentas de Gest\u00e3o de Projetos de Desenvolvimento de Software: um mapeamento sistem\u00e1tico da literatura. 2022. Dispon\u00edvel em: https://lume.ufrgs.br/handle/10183/245266. Acesso em: 11 abr. 2025.</p> <p>GIOCODO, Francisco Ign\u00e1cio Giocondo; MARTINS JUNIOR, Ant\u00f4nio Sergio; MAKIYA, Ieda Kanashiro. Ferramentas de Gest\u00e3o de Projetos para o Desenvolvimento de Softwares: Uma Pesquisa Survey. 2021. Dispon\u00edvel em: https://recima21.com.br/index.php/recima21/article/view/5064. Acesso em: 11 abr. 2025.</p>"},{"location":"planejamento/metodologia/","title":"Metodologia","text":"<p>Neste documento, apresentamos a metodologia adotada para o desenvolvimento do projeto, que combina pr\u00e1ticas do Scrum, do pareamento, da gest\u00e3o de issues no GitHub e do uso de branches para controle de qualidade dos c\u00f3digos. Essa abordagem visa promover a colabora\u00e7\u00e3o, a efici\u00eancia e a entrega cont\u00ednua de valor.</p>"},{"location":"planejamento/metodologia/#scrum","title":"Scrum","text":"<p>O Scrum \u00e9 uma metodologia \u00e1gil que organiza o trabalho em ciclos chamados sprints. Cada sprint possui uma dura\u00e7\u00e3o fixa, durante a qual a equipe trabalha em um conjunto de tarefas priorizadas. As principais cerim\u00f4nias do Scrum, como planejamento, reuni\u00f5es di\u00e1rias (daily stand-ups), revis\u00f5es e retrospectivas, s\u00e3o utilizadas para garantir a transpar\u00eancia, a adapta\u00e7\u00e3o e a melhoria cont\u00ednua.</p>"},{"location":"planejamento/metodologia/#pareamento","title":"Pareamento","text":"<p>O pareamento, ou programa\u00e7\u00e3o em pares, \u00e9 uma pr\u00e1tica em que dois desenvolvedores trabalham juntos em uma \u00fanica esta\u00e7\u00e3o de trabalho. Enquanto um escreve o c\u00f3digo (driver), o outro revisa e fornece feedback em tempo real (observer). Essa t\u00e9cnica melhora a qualidade do c\u00f3digo, facilita a troca de conhecimento e reduz a incid\u00eancia de erros.</p>"},{"location":"planejamento/metodologia/#gestao-de-issues-no-github","title":"Gest\u00e3o de Issues no GitHub","text":"<p>A gest\u00e3o de issues no GitHub \u00e9 utilizada para organizar e rastrear o progresso das tarefas do projeto. Cada issue representa uma unidade de trabalho, que pode ser priorizada, atribu\u00edda a membros da equipe e vinculada a pull requests. Essa pr\u00e1tica garante maior visibilidade do andamento do projeto e facilita a colabora\u00e7\u00e3o entre os integrantes.</p>"},{"location":"planejamento/metodologia/#uso-de-branches-para-controle-de-qualidade","title":"Uso de Branches para Controle de Qualidade","text":"<p>O uso de branches no controle de qualidade dos c\u00f3digos permite que o desenvolvimento seja realizado de forma isolada, sem impactar a base principal do projeto. Cada funcionalidade ou corre\u00e7\u00e3o \u00e9 desenvolvida em uma branch separada, que \u00e9 revisada e testada antes de ser integrada \u00e0 branch principal. Essa pr\u00e1tica reduz o risco de introdu\u00e7\u00e3o de erros e mant\u00e9m a estabilidade do c\u00f3digo.</p> <p>Ao combinar essas quatro abordagens, buscamos criar um ambiente de trabalho colaborativo e \u00e1gil, que favore\u00e7a a entrega de solu\u00e7\u00f5es de alta qualidade.</p>"},{"location":"planejamento/planejamento_das_sprints/","title":"Planejamento das Sprints","text":"<p>Este documento apresenta o planejamento detalhado das sprints para o desenvolvimento de um compilador como parte da disciplina de Compiladores. O objetivo \u00e9 organizar as atividades, definir entregas e acompanhar o progresso do projeto ao longo do semestre. Cada sprint possui objetivos claros, entregas espec\u00edficas e tarefas distribu\u00eddas para garantir o cumprimento dos prazos e a qualidade do trabalho.</p> <p>O planejamento est\u00e1 dividido em seis sprints, cobrindo desde a forma\u00e7\u00e3o das equipes e configura\u00e7\u00e3o do ambiente at\u00e9 a entrega final do compilador e sua documenta\u00e7\u00e3o. A seguir, s\u00e3o descritas as metas e atividades de cada sprint.</p>"},{"location":"planejamento/planejamento_das_sprints/#sprint-1-2403-a-0904","title":"Sprint 1 (24/03 a 09/04)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[x] Formar as equipes e organizar o ambiente de trabalho (configurar reposit\u00f3rios, ferramentas, Flex, Bison etc.).  </li> <li>[x] Definir a linguagem-fonte do compilador (sintaxe e sem\u00e2ntica b\u00e1sica).  </li> <li>[x] Elaborar a primeira vers\u00e3o da gram\u00e1tica formal (livre de contexto).  </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[x] Documento inicial descrevendo a linguagem (tokens, estruturas, exemplos de c\u00f3digo).  </li> <li>[x] Prot\u00f3tipo de gram\u00e1tica reconhecida pelo Bison (ainda n\u00e3o funcional, mas j\u00e1 planejada).  </li> <li>[x] Ambiente configurado e testado (cada membro deve conseguir compilar e rodar um \u201chello world\u201d do Flex/Bison).  </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[x] Definir o escopo do compilador.  </li> <li>[x] Configurar reposit\u00f3rio e adicionar todos os membros.  </li> <li>[x] Configurar ferramentas: Flex, Bison, compilador C/C++.  </li> <li>[x] Criar gram\u00e1tica inicial no Bison e arquivo de regras l\u00e9xicas no Flex.  </li> <li>[x] Revisar e atualizar a documenta\u00e7\u00e3o do projeto.  </li> </ol> </li> </ul>"},{"location":"planejamento/planejamento_das_sprints/#sprint-2-1004-a-3004","title":"Sprint 2 (10/04 a 30/04)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[x] Concluir a an\u00e1lise l\u00e9xica (Flex) e iniciar a an\u00e1lise sint\u00e1tica (Bison).  </li> <li>[x] Implementar identifica\u00e7\u00e3o de tokens e testar o reconhecimento b\u00e1sico da linguagem.  </li> <li>[x] Preparar o material para o Ponto de Controle P1.  </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[x] Analisador l\u00e9xico funcional (arquivo .l completo).  </li> <li>[x] Primeiras regras sint\u00e1ticas implementadas no arquivo .y.  </li> <li>[x] Formul\u00e1rio de apresenta\u00e7\u00e3o do P1 preenchido at\u00e9 28/04.  </li> <li>[x] Apresenta\u00e7\u00e3o no dia 30/04.  </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[x] Finalizar as express\u00f5es regulares no Flex.  </li> <li>[x] Iniciar o parser no Bison.  </li> <li>[x] Testar analisador l\u00e9xico e parser inicial.  </li> <li>[x] Preparar slides/demonstrativo para o P1.  </li> <li>[x] Preencher o formul\u00e1rio do P1.  </li> </ol> </li> </ul>"},{"location":"planejamento/planejamento_das_sprints/#sprint-3-0105-a-1405","title":"Sprint 3 (01/05 a 14/05)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[x] Evoluir o analisador sint\u00e1tico com novas produ\u00e7\u00f5es gramaticais.  </li> <li>[x] Iniciar a estrutura interna do compilador (\u00e1rvore sint\u00e1tica, tabela de s\u00edmbolos).  </li> <li>[x] Dar os primeiros passos na an\u00e1lise sem\u00e2ntica.  </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[x] Parser com cobertura mais ampla da gram\u00e1tica.  </li> <li>[x] Estrutura de dados (AST e tabela de s\u00edmbolos) definidas e parcialmente implementadas.  </li> <li>[x] Analisador sem\u00e2ntico inicial identificando erros b\u00e1sicos.  </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[x] Estender as regras gramaticais no Bison.  </li> <li>[x] Criar e popular a tabela de s\u00edmbolos.  </li> <li>[x] Construir a AST.  </li> <li>[x] Implementar verifica\u00e7\u00e3o de tipos e escopo simples.  </li> </ol> </li> </ul>"},{"location":"planejamento/planejamento_das_sprints/#sprint-4-1505-a-0406","title":"Sprint 4 (15/05 a 04/06)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[x] Concluir an\u00e1lise sem\u00e2ntica principal.  </li> <li>[x] Implementar a gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio.  </li> <li>[x] Preparar o ponto de controle P2.  </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[x] Analisador sem\u00e2ntico robusto.  </li> <li>[x] M\u00f3dulo de gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio.  </li> <li>[x] Formul\u00e1rio do P2 preenchido at\u00e9 02/06.  </li> <li>[x] Apresenta\u00e7\u00e3o do ponto de controle P2 em 04/06.  </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[x] Refinar a an\u00e1lise sem\u00e2ntica.  </li> <li>[x] Criar gerador de c\u00f3digo intermedi\u00e1rio.  </li> <li>[x] Configurar testes para instru\u00e7\u00f5es intermedi\u00e1rias.  </li> <li>[x] Preparar apresenta\u00e7\u00e3o P2.  </li> </ol> </li> </ul>"},{"location":"planejamento/planejamento_das_sprints/#sprint-5-0506-a-2506","title":"Sprint 5 (05/06 a 25/06)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[ ] Introduzir e testar otimiza\u00e7\u00f5es no c\u00f3digo intermedi\u00e1rio.  </li> <li>[x] Implementar a gera\u00e7\u00e3o de c\u00f3digo final.  </li> <li>[x] Realizar testes integrados e corre\u00e7\u00f5es de bugs.  </li> <li>[x] Entregar o compilador final at\u00e9 27/06.  </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[ ] M\u00f3dulo de otimiza\u00e7\u00e3o b\u00e1sico.  </li> <li>[x] M\u00f3dulo de gera\u00e7\u00e3o de c\u00f3digo final.  </li> <li>[x] Compilador \u201crodando de ponta a ponta\u201d.  </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[x] Projetar e implementar otimiza\u00e7\u00f5es simples.  </li> <li>[x] Criar tradutor final.  </li> <li>[x] Testar em m\u00faltiplos programas de exemplo.  </li> <li>[x] Entregar o compilador at\u00e9 27/06.  </li> </ol> </li> </ul>"},{"location":"planejamento/planejamento_das_sprints/#sprint-6-2606-a-0907","title":"Sprint 6 (26/06 a 09/07)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[ ] Realizar as entrevistas finais.  </li> <li>[x] Ajustar eventuais pend\u00eancias do compilador.  </li> <li>[x] Concluir a documenta\u00e7\u00e3o e finalizar a disciplina.  </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[ ] Apresenta\u00e7\u00e3o do compilador nas entrevistas.  </li> <li>[ ] Corre\u00e7\u00f5es finais e documenta\u00e7\u00e3o completa.  </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[ ] Entrevistas de entrega.  </li> <li>[ ] Corrigir issues identificadas.  </li> <li>[ ] Documentar o projeto.</li> </ol> </li> </ul>"},{"location":"ponto_de_controle/ponto_de_controle1/","title":"Ponto de Controle 1","text":""},{"location":"ponto_de_controle/ponto_de_controle1/#definicao-do-projeto","title":"Defini\u00e7\u00e3o do Projeto","text":"<p>O objetivo do projeto \u00e9 desenvolver um compilador que traduz um subconjunto da linguagem Python para C. O compilador deve realizar an\u00e1lise l\u00e9xica e sint\u00e1tica, reconhecendo estruturas b\u00e1sicas da linguagem Python, como declara\u00e7\u00f5es de vari\u00e1veis, atribui\u00e7\u00f5es, express\u00f5es aritm\u00e9ticas, comandos condicionais, e comandos de impress\u00e3o. O resultado esperado \u00e9 um c\u00f3digo C equivalente ao c\u00f3digo Python de entrada.</p>"},{"location":"ponto_de_controle/ponto_de_controle1/#linguagem-de-programacao-escolhida","title":"Linguagem de Programa\u00e7\u00e3o Escolhida","text":"<p>A linguagem escolhida para o desenvolvimento do compilador \u00e9 C, utilizando as ferramentas Flex e Bison. A escolha se justifica pela efici\u00eancia dessas ferramentas na constru\u00e7\u00e3o de analisadores l\u00e9xicos e sint\u00e1ticos, al\u00e9m de sua ampla utiliza\u00e7\u00e3o em projetos de compiladores. A tradu\u00e7\u00e3o para C foi escolhida devido \u00e0 sua simplicidade e proximidade com o hardware, permitindo a gera\u00e7\u00e3o de c\u00f3digo eficiente.</p>"},{"location":"ponto_de_controle/ponto_de_controle1/#planejamento-das-sprints","title":"Planejamento das Sprints","text":"<ul> <li>Sprint 1: Defini\u00e7\u00e3o do projeto e configura\u00e7\u00e3o de ambiente.</li> <li>Sprint 2: Capacita\u00e7\u00e3o Individual em Bison e Analisador L\u00e9xico.</li> <li>Sprint 3: Implementa\u00e7\u00e3o do analisador l\u00e9xico (scanner) para reconhecer tokens b\u00e1sicos da linguagem Python, como palavras-chave, identificadores, operadores e delimitadores.</li> <li>Sprint 4: Implementa\u00e7\u00e3o do analisador sint\u00e1tico (parser) com suporte a regras gramaticais b\u00e1sicas da linguagem Python.</li> <li>Sprint 5: Integra\u00e7\u00e3o do scanner e parser, com gera\u00e7\u00e3o de c\u00f3digo C equivalente ao c\u00f3digo Python de entrada.</li> <li>Sprint 6: Testes e valida\u00e7\u00e3o do compilador, incluindo casos de uso mais complexos e ajustes finais.</li> </ul>"},{"location":"ponto_de_controle/ponto_de_controle1/#o-que-foi-implementado","title":"O que Foi Implementado","text":"<ul> <li>Analisador L\u00e9xico (scanner.l):</li> <li>Reconhecimento de palavras-chave da linguagem Python, como <code>print</code>, <code>if</code>, <code>else</code>, <code>int</code>, entre outras.</li> <li>Identifica\u00e7\u00e3o de operadores e delimitadores.</li> <li>Suporte a n\u00fameros inteiros e identificadores.</li> <li> <p>Ignora espa\u00e7os em branco e caracteres n\u00e3o reconhecidos com mensagens de aviso.</p> </li> <li> <p>Analisador Sint\u00e1tico (parser.y):</p> </li> <li>Implementa\u00e7\u00e3o de regras gramaticais para:<ul> <li>Declara\u00e7\u00f5es de vari\u00e1veis.</li> <li>Atribui\u00e7\u00f5es.</li> <li>Express\u00f5es aritm\u00e9ticas.</li> <li>Comandos condicionais.</li> <li>Comandos de impress\u00e3o.</li> </ul> </li> <li>Suporte a opera\u00e7\u00f5es aritm\u00e9ticas b\u00e1sicas e compara\u00e7\u00f5es.</li> <li>Gera\u00e7\u00e3o de mensagens de sa\u00edda que representam o c\u00f3digo C equivalente ao c\u00f3digo Python de entrada.</li> </ul>"},{"location":"ponto_de_controle/ponto_de_controle2/","title":"Relat\u00f3rio do Compilador PYtoC","text":""},{"location":"ponto_de_controle/ponto_de_controle2/#pontos-positivos","title":"Pontos Positivos","text":"<ul> <li>Integra\u00e7\u00e3o entre Flex e Bison funcionando corretamente.</li> <li>O compilador detecta erros de sintaxe.</li> <li>Emite mensagens de erro com tratamento m\u00ednimo de falhas (demonstra a exist\u00eancia de uma estrutura de parsing).</li> <li>Reconhece palavras-chave do Python (indicando que o analisador l\u00e9xico est\u00e1 mapeando tokens corretamente).</li> <li>Existem tokens definidos, regras gramaticais e l\u00f3gica de convers\u00e3o (ainda que incompleta).</li> </ul>"},{"location":"ponto_de_controle/ponto_de_controle2/#dificuldades-e-solucoes","title":"Dificuldades e Solu\u00e7\u00f5es","text":"<ul> <li>Parser, AST e Tabela de S\u00edmbolos: Refinamos as regras gramaticais, incorporando mecanismos para constru\u00e7\u00e3o e vincula\u00e7\u00e3o din\u00e2mica dos n\u00f3s, al\u00e9m de integrar a gera\u00e7\u00e3o da tabela de s\u00edmbolos durante a an\u00e1lise sint\u00e1tica. Isso permitiu maior flexibilidade e precis\u00e3o na representa\u00e7\u00e3o da estrutura do c\u00f3digo-fonte.</li> <li>Escopo: Reestruturamos o planejamento do projeto, priorizando a implementa\u00e7\u00e3o das fun\u00e7\u00f5es cr\u00edticas relacionadas ao controle de escopo, o que facilitou a identifica\u00e7\u00e3o e resolu\u00e7\u00e3o de conflitos entre vari\u00e1veis e fun\u00e7\u00f5es em diferentes contextos.</li> </ul>"},{"location":"ponto_de_controle/ponto_de_controle2/#proximas-entregas","title":"Pr\u00f3ximas Entregas","text":"<ul> <li>Implementar a AST (\u00c1rvore Sint\u00e1tica Abstrata) e a Tabela de S\u00edmbolos.</li> <li>Aprimorar as mensagens de erro para maior clareza e precis\u00e3o.</li> <li>Desenvolver testes automatizados para garantir a robustez do compilador.</li> <li>Adicionar verifica\u00e7\u00e3o de tipos e escopos.</li> <li>Ampliar e refinar as regras gramaticais no Bison.</li> <li>Melhorar a an\u00e1lise sem\u00e2ntica para maior fidelidade ao Python.</li> </ul>"},{"location":"ponto_de_controle/ponto_de_controle2/#entregas-implementadas","title":"Entregas Implementadas","text":"<ul> <li>Implementa\u00e7\u00e3o da AST (\u00c1rvore Sint\u00e1tica Abstrata) e da Tabela de S\u00edmbolos.</li> <li>Aprimoramento das mensagens de erro para maior clareza.</li> <li>Cria\u00e7\u00e3o de testes automatizados para valida\u00e7\u00e3o do compilador.</li> <li>Implementa\u00e7\u00e3o da verifica\u00e7\u00e3o de tipos e escopos.</li> <li>Expans\u00e3o e refinamento das regras gramaticais no Bison.</li> <li>Melhoria da an\u00e1lise sem\u00e2ntica para maior ader\u00eancia ao Python.</li> <li>Parcial de otimiza\u00e7\u00e3o implementada.</li> <li>Parcial de gera\u00e7\u00e3o de c\u00f3digo implementada.</li> </ul>"},{"location":"problemas_e_solucoes/problemas_e_solucoes1/","title":"Problemas Encontrados e Solu\u00e7\u00f5es Adotadas","text":"<p>Este documento descreve os principais problemas enfrentados durante o desenvolvimento do compilador de Python para C e as solu\u00e7\u00f5es adotadas para resolv\u00ea-los.</p>"},{"location":"problemas_e_solucoes/problemas_e_solucoes1/#problemas-e-solucoes","title":"Problemas e Solu\u00e7\u00f5es","text":""},{"location":"problemas_e_solucoes/problemas_e_solucoes1/#1-dificuldade-na-integracao-entre-flex-e-bison","title":"1. Dificuldade na Integra\u00e7\u00e3o entre Flex e Bison","text":"<ul> <li>Problema: Inicialmente, houve dificuldades para integrar o analisador l\u00e9xico (Flex) com o analisador sint\u00e1tico (Bison), especialmente na defini\u00e7\u00e3o e uso dos tokens.</li> <li>Solu\u00e7\u00e3o: Foi realizada uma revis\u00e3o detalhada da documenta\u00e7\u00e3o de Flex e Bison. Al\u00e9m disso, utilizamos o arquivo de cabe\u00e7alho gerado pelo Bison (<code>parser.tab.h</code>) para garantir que os tokens definidos no Flex fossem reconhecidos corretamente pelo Bison.</li> </ul>"},{"location":"problemas_e_solucoes/problemas_e_solucoes1/#2-dificuldade-na-integracao-entre-flex-e-bison-no-mac","title":"2. Dificuldade na Integra\u00e7\u00e3o entre Flex e Bison no MAC","text":"<ul> <li>Problema: Inicialmente, houve dificuldades para integrar o analisador l\u00e9xico (Flex) com o analisador sint\u00e1tico (Bison), especialmente no sistema operacional macOS.</li> <li>Solu\u00e7\u00e3o: Foi realizada uma revis\u00e3o detalhada da documenta\u00e7\u00e3o de Flex e Bison. Al\u00e9m disso, utilizamos o arquivo de cabe\u00e7alho gerado pelo Bison para garantir o funcionamento.</li> </ul>"},{"location":"problemas_e_solucoes/problemas_e_solucoes1/#3-erro-ao-gerar-o-codigo-com-gcc","title":"3. Erro ao Gerar o C\u00f3digo com GCC","text":"<ul> <li>Problema: Durante a compila\u00e7\u00e3o do projeto com GCC, surgiram erros relacionados a fun\u00e7\u00f5es n\u00e3o definidas ou conflitos de tipos.</li> <li>Solu\u00e7\u00e3o: Verificamos as depend\u00eancias e inclu\u00edmos a biblioteca <code>-lfl</code> no comando de compila\u00e7\u00e3o para resolver os erros relacionados ao Flex. O comando final ficou assim:   ```bash   gcc -o compilador parser.tab.c lex.yy.c -lfl</li> </ul>"},{"location":"problemas_e_solucoes/problemas_e_solucoes1/#4-organizacao-do-repositorio","title":"4. Organiza\u00e7\u00e3o do Reposit\u00f3rio","text":"<ul> <li>Problema: A estrutura inicial do reposit\u00f3rio estava desorganizada, dificultando a localiza\u00e7\u00e3o de arquivos e o controle de vers\u00f5es.</li> <li>Solu\u00e7\u00e3o: Reestruturamos o reposit\u00f3rio, separando os arquivos em diret\u00f3rios espec\u00edficos, como Compilador/, docs/, e Estudo/. Tamb\u00e9m adotamos o uso de branches no Git para organizar o fluxo de trabalho.</li> </ul>"},{"location":"problemas_e_solucoes/problemas_e_solucoes1/#5-configurar-os-condicionais-no-lexico-e-bison","title":"5. Configurar os Condicionais no L\u00e9xico e Bison","text":"<ul> <li>Problema: Houve dificuldades para implementar condicionais no analisador l\u00e9xico e no analisador sint\u00e1tico, especialmente na defini\u00e7\u00e3o de regras que dependem de estados espec\u00edficos.</li> <li>Solu\u00e7\u00e3o: Foram utilizados ferramentas para aux\u00edlio.</li> </ul>"},{"location":"problemas_e_solucoes/problemas_e_solucoes2/","title":"Relat\u00f3rio do Compilador PYtoC","text":""},{"location":"problemas_e_solucoes/problemas_e_solucoes2/#problemas-e-solucoes","title":"Problemas e Solu\u00e7\u00f5es","text":"<ul> <li>Parser, AST e Tabela de S\u00edmbolos: Refinamos as regras gramaticais, incorporando mecanismos para constru\u00e7\u00e3o e vincula\u00e7\u00e3o din\u00e2mica dos n\u00f3s, al\u00e9m de integrar a gera\u00e7\u00e3o da tabela de s\u00edmbolos durante a an\u00e1lise sint\u00e1tica. Isso permitiu maior flexibilidade e precis\u00e3o na representa\u00e7\u00e3o da estrutura do c\u00f3digo-fonte.</li> <li>Escopo: Reestruturamos o planejamento do projeto, priorizando a implementa\u00e7\u00e3o das fun\u00e7\u00f5es cr\u00edticas relacionadas ao controle de escopo, o que facilitou a identifica\u00e7\u00e3o e resolu\u00e7\u00e3o de conflitos entre vari\u00e1veis e fun\u00e7\u00f5es em diferentes contextos.</li> </ul>"},{"location":"sprints/sprint/","title":"Plano de Sprints para Compilador Python-C","text":""},{"location":"sprints/sprint/#informacoes-gerais","title":"Informa\u00e7\u00f5es Gerais","text":"<p>Disciplina: FGA0003 - Compiladores 1 Semestre: 2025/1 Professor: Dr. Sergio Ant\u00f4nio Andrade de Freitas Projeto: Compilador de Python para C Entregas Principais: - Ponto de Controle P1: 30/04/2025 - Ponto de Controle P2: 04/06/2025 - Entrega Final: 27/06/2025 - Entrevistas Finais: 30/06/2025 e 02/07/2025</p>"},{"location":"sprints/sprint/#membros-da-equipe","title":"Membros da Equipe","text":"Filipe Tiago Isabelle da Costa Jo\u00e3o Pedro Jo\u00e3o Pedro"},{"location":"sprints/sprint/#visao-geral-das-sprints","title":"Vis\u00e3o Geral das Sprints","text":"Sprint Per\u00edodo Foco Entregas Status 1 24/03 - 09/04 Prepara\u00e7\u00e3o e An\u00e1lise L\u00e9xica Analisador L\u00e9xico Funcional \u2705 Finalizada 2 10/04 - 28/04 An\u00e1lise Sint\u00e1tica Parser e P1 \u2705 Finalizada 3 01/05 - 14/05 Representa\u00e7\u00e3o Interna AST e Tabela de S\u00edmbolos \u2705 Finalizada 4 15/05 - 02/06 An\u00e1lise Sem\u00e2ntica Verificador Sem\u00e2ntico e P2 \u2705 Finalizada 5 05/06 - 18/06 Gera\u00e7\u00e3o de C\u00f3digo Gerador de C\u00f3digo C \u2705 Finalizada 6 19/06 - 27/06 Refinamento e Testes Compilador Completo \u2705 Finalizada 7 28/06 - 09/07 Apresenta\u00e7\u00e3o e Fechamento Documenta\u00e7\u00e3o Final e Entrevista \u2705 Finalizada"},{"location":"sprints/sprint/#detalhamento-das-sprints","title":"Detalhamento das Sprints","text":""},{"location":"sprints/sprint/#sprint-1-2403-a-0904","title":"Sprint 1 (24/03 a 09/04)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[x] Formar as equipes e organizar o ambiente de trabalho (configurar reposit\u00f3rios, ferramentas, Flex, Bison etc.).  <ul> <li>Respons\u00e1veis: Filipe, Tiago, Isabelle, Jo\u00e3o Pedro Costa (johnaopedro), Jo\u00e3o Pedro  </li> </ul> </li> <li>[x] Definir a linguagem-fonte do compilador (sintaxe e sem\u00e2ntica b\u00e1sica).  <ul> <li>Respons\u00e1veis: Filipe, Tiago, Isabelle, Jo\u00e3o Pedro Costa (johnaopedro), Jo\u00e3o Pedro  </li> </ul> </li> <li>[x] Elaborar a primeira vers\u00e3o da gram\u00e1tica formal (livre de contexto).  <ul> <li>Respons\u00e1veis: Filipe, Tiago, Isabelle, Jo\u00e3o Pedro Costa (johnaopedro), Jo\u00e3o Pedro  </li> </ul> </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[x] Documento inicial descrevendo a linguagem (tokens, estruturas, exemplos de c\u00f3digo).  <ul> <li>Respons\u00e1veis: Jo\u00e3o Pedro Costa (johnaopedro) </li> </ul> </li> <li>[x] Prot\u00f3tipo de gram\u00e1tica reconhecida pelo Bison (ainda n\u00e3o funcional, mas j\u00e1 planejada).  <ul> <li>Respons\u00e1veis: Filipe, Tiago, Isabelle, Jo\u00e3o Pedro Costa (johnaopedro), Jo\u00e3o Pedro </li> </ul> </li> <li>[x] Ambiente configurado e testado (cada membro deve conseguir compilar e rodar um \u201chello world\u201d do Flex/Bison).  <ul> <li>Respons\u00e1veis: Filipe, Tiago, Isabelle, Jo\u00e3o Pedro Costa (johnaopedro), Jo\u00e3o Pedro </li> </ul> </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[x] Definir o escopo do compilador.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Configurar reposit\u00f3rio e adicionar todos os membros.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Configurar ferramentas: Flex, Bison, compilador C/C++.  <ul> <li>Respons\u00e1veis: todos</li> </ul> </li> <li>[x] Criar gram\u00e1tica inicial no Bison e arquivo de regras l\u00e9xicas no Flex.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Revisar e atualizar a documenta\u00e7\u00e3o do projeto.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ol> </li> </ul>"},{"location":"sprints/sprint/#sprint-2-1004-a-3004","title":"Sprint 2 (10/04 a 30/04)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[x] Concluir a an\u00e1lise l\u00e9xica (Flex) e iniciar a an\u00e1lise sint\u00e1tica (Bison).  <ul> <li>Respons\u00e1veis: todos </li> </ul> </li> <li>[x] Implementar identifica\u00e7\u00e3o de tokens e testar o reconhecimento b\u00e1sico da linguagem.  <ul> <li>Respons\u00e1veis: todos</li> </ul> </li> <li>[x] Preparar o material para o Ponto de Controle P1.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[x] Analisador l\u00e9xico funcional (arquivo .l completo).  <ul> <li>Respons\u00e1veis: Filipe, Tiago, Isabelle, Jo\u00e3o Pedro Costa (johnaopedro), Jo\u00e3o Pedro</li> </ul> </li> <li>[x] Primeiras regras sint\u00e1ticas implementadas no arquivo .y.  <ul> <li>Respons\u00e1veis: Jo\u00e3o Pedro Costa (johnaopedro)  </li> </ul> </li> <li>[x] Formul\u00e1rio de apresenta\u00e7\u00e3o do P1 preenchido at\u00e9 28/04.  <ul> <li>Respons\u00e1veis: Jo\u00e3o Pedro Costa (johnaopedro)  </li> </ul> </li> <li>[ ] Apresenta\u00e7\u00e3o no dia 30/04.  <ul> <li>Respons\u00e1veis: Filipe, Tiago, Isabelle, Jo\u00e3o Pedro Costa (johnaopedro), Jo\u00e3o Pedro</li> </ul> </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[x] Finalizar as express\u00f5es regulares no Flex.  <ul> <li>Respons\u00e1veis: Jo\u00e3o Pedro Costa (johnaopedro)  </li> </ul> </li> <li>[x] Iniciar o parser no Bison.  <ul> <li>Respons\u00e1veis: Jo\u00e3o Pedro Costa (johnaopedro)  </li> </ul> </li> <li>[x] Testar analisador l\u00e9xico e parser inicial.  <ul> <li>Respons\u00e1veis: Jo\u00e3o Pedro Costa (johnaopedro)  </li> </ul> </li> <li>[ ] Preparar slides/demonstrativo para o P1.  <ul> <li>Respons\u00e1veis: Professor providenciou.</li> </ul> </li> <li>[x] Preencher o formul\u00e1rio do P1.  <ul> <li>Respons\u00e1veis: Jo\u00e3o Pedro Costa (johnaopedro)  </li> </ul> </li> </ol> </li> </ul>"},{"location":"sprints/sprint/#sprint-3-0105-a-1405","title":"Sprint 3 (01/05 a 14/05)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[x] Evoluir o analisador sint\u00e1tico com novas produ\u00e7\u00f5es gramaticais.  <ul> <li>Respons\u00e1veis: Tiago, Isabelle </li> </ul> </li> <li>[x] Iniciar a estrutura interna do compilador (\u00e1rvore sint\u00e1tica, tabela de s\u00edmbolos).  <ul> <li>Respons\u00e1veis: Filipe, Jo\u00e3o Pedro </li> </ul> </li> <li>[x] Dar os primeiros passos na an\u00e1lise sem\u00e2ntica.  <ul> <li>Respons\u00e1veis: Tiago, Jo\u00e3o Pedro Costa (johnaopedro)  </li> </ul> </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[x] Parser com cobertura mais ampla da gram\u00e1tica.  <ul> <li>Respons\u00e1veis: Tiago, Isabelle </li> </ul> </li> <li>[x] Estrutura de dados (AST e tabela de s\u00edmbolos) definidas e parcialmente implementadas.  <ul> <li>Respons\u00e1veis: Filipe, Jo\u00e3o Pedro </li> </ul> </li> <li>[x] Analisador sem\u00e2ntico inicial identificando erros b\u00e1sicos.  <ul> <li>Respons\u00e1veis: Tiago, Jo\u00e3o Pedro Costa (johnaopedro)  </li> </ul> </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[x] Estender as regras gramaticais no Bison.  <ul> <li>Respons\u00e1veis: Tiago, Isabelle</li> </ul> </li> <li>[x] Criar e popular a tabela de s\u00edmbolos.  <ul> <li>Respons\u00e1veis: Filipe, Jo\u00e3o Pedro, Jo\u00e3o Pedro Costa (johnaopedro) </li> </ul> </li> <li>[x] Construir a AST.  <ul> <li>Respons\u00e1veis: Filipe, Jo\u00e3o Pedro, Jo\u00e3o Pedro Costa (johnaopedro) </li> </ul> </li> <li>[x] Implementar verifica\u00e7\u00e3o de tipos e escopo simples.  <ul> <li>Respons\u00e1veis: Tiago, Jo\u00e3o Pedro Costa (johnaopedro)  </li> </ul> </li> <li>[x] Revisar e atualizar a documenta\u00e7\u00e3o do projeto.  <ul> <li>Respons\u00e1veis: todos</li> </ul> </li> </ol> </li> </ul>"},{"location":"sprints/sprint/#sprint-4-1505-a-0406","title":"Sprint 4 (15/05 a 04/06)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[x] Concluir an\u00e1lise sem\u00e2ntica principal.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Implementar a gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Preparar o ponto de controle P2.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[x] Analisador sem\u00e2ntico robusto.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] M\u00f3dulo de gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Formul\u00e1rio do P2 preenchido at\u00e9 02/06.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Apresenta\u00e7\u00e3o do ponto de controle P2 em 04/06.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[x] Refinar a an\u00e1lise sem\u00e2ntica.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Criar gerador de c\u00f3digo intermedi\u00e1rio.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Configurar testes para instru\u00e7\u00f5es intermedi\u00e1rias.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Preparar apresenta\u00e7\u00e3o P2.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ol> </li> </ul>"},{"location":"sprints/sprint/#sprint-5-0506-a-2506","title":"Sprint 5 (05/06 a 25/06)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[x] Introduzir e testar otimiza\u00e7\u00f5es no c\u00f3digo intermedi\u00e1rio.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Implementar a gera\u00e7\u00e3o de c\u00f3digo final.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Realizar testes integrados e corre\u00e7\u00f5es de bugs.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Entregar o compilador final at\u00e9 27/06.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[x] M\u00f3dulo de otimiza\u00e7\u00e3o b\u00e1sico.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] M\u00f3dulo de gera\u00e7\u00e3o de c\u00f3digo final.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Compilador \u201crodando de ponta a ponta\u201d.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[x] Projetar e implementar otimiza\u00e7\u00f5es simples.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Criar tradutor final.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Testar em m\u00faltiplos programas de exemplo.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Entregar o compilador at\u00e9 27/06.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ol> </li> </ul>"},{"location":"sprints/sprint/#sprint-6-2606-a-0907","title":"Sprint 6 (26/06 a 09/07)","text":"<ul> <li> <p>Objetivos Principais </p> <ul> <li>[ ] Realizar as entrevistas finais.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Ajustar eventuais pend\u00eancias do compilador.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[x] Concluir a documenta\u00e7\u00e3o e finalizar a disciplina.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ul> </li> <li> <p>Principais Entregas </p> <ul> <li>[ ] Apresenta\u00e7\u00e3o do compilador nas entrevistas.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[ ] Corre\u00e7\u00f5es finais e documenta\u00e7\u00e3o completa.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ul> </li> <li> <p>Tarefas e Atividades </p> <ol> <li>[ ] Entrevistas de entrega.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[ ] Corrigir issues identificadas.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> <li>[ ] Documentar o projeto.  <ul> <li>Respons\u00e1veis: todos  </li> </ul> </li> </ol> </li> </ul>"}]}